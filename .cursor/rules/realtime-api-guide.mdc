---
description: 
globs: server/*.ts,server/**/*.ts
alwaysApply: false
---
This is codebase for Inline, a chat app similar to Slack.

In server/ module, we have two APIs, one is a REST API using files in methods/ directory and based on Elyisia. The newer one we use more is the realtime API based on protocol buffers which uses web sockets using our RPC format. We compose API in the functions/ directory which are abstracted away from the API. Then we utilize those in our Realtime API handlers (stored in realtime/handlers/) that connect it to the RPC type system. Our database schema is under db/schema/ directory using Drizzle. To use database JSON types in Realtime API, we create an encoder function in encoders/ directory. We use RealtimeRpcError in handlers and functions. 

To interact with database safely, we use server/src/db/models. Some fields are encrypted and should use the server/src/modules/encryption utilities. New database tables should be exported from server/src/db/schema/index.ts. 

To create a new realtime api handler or function, first look at the core.proto file and ensure RPC types are created, then create the function, then create the handler and add the handlers in server/src/realtime/handlers/_rpc.ts file to be known to the API. Add encoder or model files as needed. For using external services, create a file under server/src/libs. External env variables are typechecked in server/src/env.ts. For logging and error capture to Sentry use our server/src/utils/log.ts helper class.  To encode database values to protocol types, if it needs decryption, create a proccessor function in the respective model similar to `processMessage` in server/src/db/models/messages.ts, and define an encoder in server/src/realtime/encoders/encoders.ts to convert types from DbType to protocol buffers types. Do not use legacy encoders from api-types folder. For authorizing user access, use  server/src/utils/authorize.ts helpers if available for the use case otherwise create one inside it.

We use Bun. And Bun test to write our tests. Our tests are in src/__tests__. We intend to slowly add more tests and develope our testing suite so we aren't spending a lot of time here atm.

/proto/core.proto is my core protocol files 
protocol is generated in server/packages/protocol/src/core.ts. Snake case fields are turned into camel case in typescript, and camel case in Swift except for Id that becomes ID.

We use Drizzle ORM for database calls, for complex queries we use the default syntax (db.select(chats)) and for simpler nested query cases we use the query format that is more readable (db._query.chats.findMany). In drizzle when you write `where` statements, you need to import utility functions like `eq`, `and`, `or` from drizzle package.

Our testing utilities are at /server/src/__tests__/setup.ts.

To enable debug logging in tests, set process.env["DEBUG"] = "1".

## Updates
when encoding updates, make sure you encode update object for each user separately because it affects how Peer and data is encoded.

## Generate protocol buffers
In root of the repo, call:
```
bun generate:proto
```

## Database migrations

First generate migrations:
```
cd server && bun db:generate <migration_name_slug>
```

Then apply migrations
```
cd server && bun db:migrate
```