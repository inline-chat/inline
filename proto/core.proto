syntax = "proto3";

// --- Protocol Messages ---

message ClientMessage  { 
  uint64 id = 1;
  uint32 seq = 2;

  reserved 3;

  oneof body {
    ConnectionInit connection_init = 4;
    RpcCall rpc_call = 5;
    Ack ack = 6;
    Ping ping = 7;
  }
}

message ConnectionInit {
  string token = 1;
}

message ServerProtocolMessage {
  uint64 id = 1;

  reserved 2, 3;

  oneof body {
    ConnectionOpen connection_open = 4;
    RpcResult rpc_result = 5;
    RpcError rpc_error = 6;
    ServerMessage message = 7;
    Ack ack = 8;
    Pong pong = 9;
  }
}

message ServerMessage {
  reserved 1,2,3;

  oneof payload {
    UpdatesPayload update = 4;
  }
}

message UpdatesPayload {
  repeated Update updates = 1;
}

message Ack {
  uint64 msg_id = 1;
}

message ConnectionOpen {
}

message Ping {
  uint64 nonce = 1;
}

message Pong {
  uint64 nonce = 1;
}

// --- Application Types ---

message InputPeer {
  reserved 1;
  oneof type {
    InputPeerSelf self = 2;
    InputPeerChat chat = 3;
    InputPeerUser user = 4;
  }
}

message InputPeerSelf {}

message InputPeerChat {
  int64 chat_id = 1;
}

message InputPeerUser {
  int64 user_id = 1;
}

message Peer {
  reserved 1;
  oneof type {
    PeerChat chat = 2;
    PeerUser user = 3;
  }
}

message PeerChat {
  int64 chat_id = 1;
}

message PeerUser {
  int64 user_id = 1;
}


message User {
  int64 id = 1;
  optional string first_name = 2;
  optional string last_name = 3;
  optional string username = 4;
  optional string phone_number = 5;
  optional string email = 6;

  // If true, certain fields such as email or phone_number will be missing
  optional bool min = 7;

  optional UserStatus status = 8;

  optional UserProfilePhoto profile_photo = 9;
}

message UserProfilePhoto {
  // ID of the photo
  int64 photo_id = 1;

  // Stripped thumbnail of the photo
  bytes stripped_thumb = 2;
}


message Message {
  int64 id = 1;

  // User ID of the sender
  int64 from_id = 2;

  // Peer ID of the recipient
  Peer peer_id = 3;

  // The "chat ID" of the message, for messages in a chat
  int64 chat_id = 4;

  // Message text
  optional string message = 5;

  // Whether the message is outgoing
  bool out = 6;

  // Date of the message
  int64 date = 7;

  // Whether user is mentioned
  optional bool mentioned = 8;

  // Message ID of the message being replied to
  optional int64 reply_to_msg_id = 9;

  // Media of the message
  optional MessageMedia media = 10;
  
  // Date of the last edit if edited
  optional int64 edit_date = 11;
  
  // ID of the grouped message if it's part of an album
  optional int64 grouped_id = 12;

  // Attachments of the message
  optional MessageAttachments attachments = 13;

  // Reactions of the message
  optional MessageReactions reactions = 14;
  
  // Whether the message is a sticker
  optional bool is_sticker = 15;
}

message MessageReactions {
  // Reactions of the messageprotocol buffers
  repeated Reaction reactions = 1;
  
}

message Reaction {
  // Emoji of the reaction
  string emoji = 1;

  // ID of the user who reacted
  int64 user_id = 2;

  // ID of the message that this reaction is for
  int64 message_id = 3;

  // ID of the chat that this reaction is for
  int64 chat_id = 4;

  // Date of the reaction
  int64 date = 5;
}

// Add reaction input
message AddReactionInput {
  // Emoji of the reaction
  string emoji = 1;

  // ID of the message that this reaction is for
  int64 message_id = 2;

  // ID of the peer that this reaction is for
  InputPeer peer_id = 3;
}

// Add reaction result
message AddReactionResult {
  repeated Update updates = 1;
}

// Delete reaction input
message DeleteReactionInput {
  string emoji = 1;
  InputPeer peer_id = 2;
  int64 message_id = 3;
}

message DeleteReactionResult {
  repeated Update updates = 1;
}

message MessageAttachments {
  repeated MessageAttachment attachments = 1;
}

message MessageAttachment {
  int64 message_id = 1;

  oneof attachment {
    MessageAttachmentExternalTask external_task = 2;
  }
}

message MessageAttachmentExternalTask {
  // ID of external task in our database
  int64 id = 1;

  // ID of the task in the external application
  string task_id = 2;

  // Application name 
  string application = 3;

  // Title of the task/issue
  string title = 4;

  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_BACKLOG = 1;
    STATUS_TODO = 2;
    STATUS_IN_PROGRESS = 3;
    STATUS_DONE = 4;
    STATUS_CANCELLED = 5;
  }

  // Status of the task
  Status status = 5;

  // Assigned user ID in Inline
  int64 assigned_user_id = 6;

  // URL of the task/issue in the external application
  string url = 7;

  // Number/code of the task/issue in the external application
  string number = 8;

  // Date of creation/addition in Inline
  int64 date = 9;
}

message MessageMedia {
  // WIP: add document, audio, video.

  oneof media {
    MessagePhoto photo = 1;
    MessageVideo video = 2;
    MessageDocument document = 3;
  }
}

message MessagePhoto {
  Photo photo = 1;
}

message MessageVideo {
  Video video = 1;
}

message MessageDocument {
  Document document = 1;
}

message Video {
  int64 id = 1;
  
  // Date of upload
  int64 date = 2;

  // Width of the video
  int32 w = 3;

  // Height of the video
  int32 h = 4;

  // Duration of the video in seconds
  int32 duration = 5;

  // File size
  int32 size = 6;

  // Thumbnail of the video
  optional Photo photo = 7;

  // CDN URL
  optional string cdn_url = 8;
}

message Document {
  int64 id = 1;

  // Original file name
  string file_name = 2;

  // MIME type of the file
  string mime_type = 3;

  // File size
  int32 size = 4;

  // CDN URL
  optional string cdn_url = 5;

  // Date of upload
  int64 date = 6;
}

// Photo for message media, profile photo, space photo, or chat photo
message Photo {
  // ID
  int64 id = 1;
  
  // Date of upload
  int64 date = 2; 
  
  repeated PhotoSize sizes = 3;

  enum Format {
    FORMAT_UNSPECIFIED = 0;
    FORMAT_JPEG = 1;
    FORMAT_PNG = 2;
  }

  // Format of the photo
  Format format = 4;
  
  // Unique identifier of the file
  optional string file_unique_id = 100;
}


message PhotoSize {
  /** Thumbnail type.
  Currently supported: 
  - "b" - small box 140x140
  - "c" - medium box 320x320
  - "d" - regular box 800x800
  - "f" - large box 2560x2560
  - "s" - stripped (tiny version embedded in bytes)
  - "y" - ??
  - "x" - small cropped ??
  - "w" - medium cropped ??
  - "v" - ??
  */
  string type = 1;

  // Width in pixels
  int32 w = 2;

  // Height in pixels
  int32 h = 3;

  // File size
  int32 size = 4;

  // Bytes for stripped size used in blur thumbnails
  optional bytes bytes = 5;

  // CDN URL
  optional string cdn_url = 6;
}

// --- Application RPC Functions ---

message RpcError {
  uint64 req_msg_id = 1;
  Code error_code = 2;
  string message = 3;
  int32 code = 4;
   
  // Type of error
  enum Code {
    UNKNOWN = 0;
    BAD_REQUEST = 1;
    UNAUTHENTICATED = 2;    
    RATE_LIMIT = 3;
    INTERNAL_ERROR = 4;
    PEER_ID_INVALID = 5;
    MESSAGE_ID_INVALID = 6;
  }
}

enum Method {
  UNSPECIFIED = 0;
  GET_ME = 1;
  SEND_MESSAGE = 2;
  GET_PEER_PHOTO = 3;
  DELETE_MESSAGES = 4;
  GET_CHAT_HISTORY = 5;
  ADD_REACTION = 6;
  DELETE_REACTION = 7;
  EDIT_MESSAGE = 8;
}

message RpcCall {
  Method method = 1;
  oneof input {
    GetMeInput getMe = 2;
    GetPeerPhotoInput getPeerPhoto = 3;
    DeleteMessagesInput deleteMessages = 4;
    SendMessageInput sendMessage = 5;
    GetChatHistoryInput getChatHistory = 6;
    AddReactionInput addReaction = 7;
    DeleteReactionInput deleteReaction = 8;
    EditMessageInput editMessage = 9;
  }
}

message RpcResult {
  uint64 req_msg_id = 1;
  
  oneof result {
    GetMeResult getMe = 2;
    GetPeerPhotoResult getPeerPhoto = 3;
    DeleteMessagesResult deleteMessages = 4;
    SendMessageResult sendMessage = 5;
    GetChatHistoryResult getChatHistory = 6;
    AddReactionResult addReaction = 7;
    DeleteReactionResult deleteReaction = 8;
    EditMessageResult editMessage = 9;
  }
}

message GetMeInput {}
message GetMeResult {
  User user = 1;
}

message GetPeerPhotoInput {
  InputPeer peer_id = 1;
  int64 photo_id = 2;
}
message GetPeerPhotoResult {
  Photo photo = 1;
}

message DeleteMessagesInput {
  repeated int64 message_ids = 1;
  InputPeer peer_id = 2;
}
message DeleteMessagesResult {
  repeated Update updates = 1;
}


message EditMessageInput {
  int64 message_id = 1;
  InputPeer peer_id = 2;
  string text = 3;
}

message EditMessageResult {
  repeated Update updates = 1;
}


message InputMedia {
  oneof media {
    InputMediaPhoto photo = 1;
    InputMediaVideo video = 2;
    InputMediaDocument document = 3;
  }
}

message InputMediaPhoto {
  // ID of the photo that we have uploaded
  int64 photo_id = 1;
}

message InputMediaVideo {
  // ID of the video that we have uploaded
  int64 video_id = 1;
}

message InputMediaDocument {
  // ID of the document that we have uploaded
  int64 document_id = 1;
}

message SendMessageInput {
  InputPeer peer_id = 1;

  // Message text or caption
  optional string message = 2;

  // Message ID of the message being replied to
  optional int64 reply_to_msg_id = 3;

  // Random ID to prevent duplicate messages
  optional int64 random_id = 4;

  // Media to send
  optional InputMedia media = 5;

  // Date of sending (until we fix the client reordering)
  optional int64 temporary_send_date = 1000;

  // Whether the message is a sticker
  optional bool is_sticker = 6;
}

message SendMessageResult {
  repeated Update updates = 2;
}

message GetChatHistoryInput {
  InputPeer peer_id = 1;

  // ID of the message to start from
  optional int64 offset_id = 2;

  // Number of messages to return
  optional int32 limit = 3;
}

message GetChatHistoryResult {
  repeated Message messages = 1;
}

//  Updates Subsystem
message Update {
  reserved 1,2,3;

  oneof update {
    UpdateNewMessage new_message = 4;
    UpdateEditMessage edit_message = 5;
    UpdateMessageId update_message_id = 6;
    UpdateDeleteMessages delete_messages = 7;
    UpdateComposeAction update_compose_action = 8;
    UpdateUserStatus update_user_status = 9;
    UpdateMessageAttachment message_attachment = 10;
    UpdateReaction update_reaction = 11;
    UpdateDeleteReaction delete_reaction = 12;
  }
}

message UpdateNewMessage {
  Message message = 1;
}

message UpdateEditMessage {
  Message message = 1;
}

// Update when messages are deleted
message UpdateDeleteMessages {
  repeated int64 message_ids = 1;
  Peer peer_id = 2;
}

// Update when a message ID is updated after sending
message UpdateMessageId {
  int64 message_id = 1;
  int64 random_id = 2;
}

// Update when a user starts or stops composing a message for typing, uploading a photo, etc
message UpdateComposeAction {
  enum ComposeAction {
    NONE = 0;
    TYPING = 1;
    UPLOADING_PHOTO = 2;
    UPLOADING_DOCUMENT = 3;
    UPLOADING_VIDEO = 4;
  }

  // User ID of the user who is composing the message
  int64 user_id = 1;

  // Peer ID of the peer user is composing the message to
  Peer peer_id = 2; 

  // Action of the user (typing, etc)
  ComposeAction action = 3;
}

message UpdateMessageAttachment {
  MessageAttachment attachment = 1;
}

message UpdateReaction {
  Reaction reaction = 1;
}

message UpdateDeleteReaction {
  string emoji = 1;
  int64 chat_id = 2;
  int64 message_id = 3;
}

message UpdateUserStatus {
  int64 user_id = 1;
  UserStatus status = 2;
}

message UserStatus {
  enum Status {
    UNKNOWN = 0;
    ONLINE = 1;
    OFFLINE = 2;
  }

  Status online = 1;
  LastOnline last_online = 2;
}

message LastOnline {
  // Date of the last online if exact last online is permitted by the user
  optional int64 date = 1;

//   // Approximate date of the last online
//   Approximate approximate = 2;


// enum Approximate {
//   UNSPECIFIED = 0;
//   RECENTLY = 1;
//   A_DAY_AGO = 2;
//   A_WEEK_AGO = 3;
//   A_MONTH_AGO = 4;
//   LONG_TIME_AGO = 5;
// }
}
