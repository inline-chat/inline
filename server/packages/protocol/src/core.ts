// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "core.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// --- Protocol Messages ---

/**
 * @generated from protobuf message ClientMessage
 */
export interface ClientMessage {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: uint32 seq = 2;
     */
    seq: number;
    /**
     * @generated from protobuf oneof: body
     */
    body: {
        oneofKind: "connectionInit";
        /**
         * @generated from protobuf field: ConnectionInit connection_init = 4;
         */
        connectionInit: ConnectionInit;
    } | {
        oneofKind: "rpcCall";
        /**
         * @generated from protobuf field: RpcCall rpc_call = 5;
         */
        rpcCall: RpcCall;
    } | {
        oneofKind: "ack";
        /**
         * @generated from protobuf field: Ack ack = 6;
         */
        ack: Ack;
    } | {
        oneofKind: "ping";
        /**
         * @generated from protobuf field: Ping ping = 7;
         */
        ping: Ping;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ConnectionInit
 */
export interface ConnectionInit {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
}
/**
 * @generated from protobuf message ServerProtocolMessage
 */
export interface ServerProtocolMessage {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf oneof: body
     */
    body: {
        oneofKind: "connectionOpen";
        /**
         * @generated from protobuf field: ConnectionOpen connection_open = 4;
         */
        connectionOpen: ConnectionOpen;
    } | {
        oneofKind: "rpcResult";
        /**
         * @generated from protobuf field: RpcResult rpc_result = 5;
         */
        rpcResult: RpcResult;
    } | {
        oneofKind: "rpcError";
        /**
         * @generated from protobuf field: RpcError rpc_error = 6;
         */
        rpcError: RpcError;
    } | {
        oneofKind: "message";
        /**
         * @generated from protobuf field: ServerMessage message = 7;
         */
        message: ServerMessage;
    } | {
        oneofKind: "ack";
        /**
         * @generated from protobuf field: Ack ack = 8;
         */
        ack: Ack;
    } | {
        oneofKind: "pong";
        /**
         * @generated from protobuf field: Pong pong = 9;
         */
        pong: Pong;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ServerMessage
 */
export interface ServerMessage {
    /**
     * @generated from protobuf oneof: payload
     */
    payload: {
        oneofKind: "update";
        /**
         * @generated from protobuf field: UpdatesPayload update = 4;
         */
        update: UpdatesPayload;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message UpdatesPayload
 */
export interface UpdatesPayload {
    /**
     * @generated from protobuf field: repeated Update updates = 1;
     */
    updates: Update[];
}
/**
 * @generated from protobuf message Ack
 */
export interface Ack {
    /**
     * @generated from protobuf field: uint64 msg_id = 1;
     */
    msgId: bigint;
}
/**
 * @generated from protobuf message ConnectionOpen
 */
export interface ConnectionOpen {
}
/**
 * @generated from protobuf message Ping
 */
export interface Ping {
    /**
     * @generated from protobuf field: uint64 nonce = 1;
     */
    nonce: bigint;
}
/**
 * @generated from protobuf message Pong
 */
export interface Pong {
    /**
     * @generated from protobuf field: uint64 nonce = 1;
     */
    nonce: bigint;
}
// --- Application Types ---

/**
 * @generated from protobuf message InputPeer
 */
export interface InputPeer {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "self";
        /**
         * @generated from protobuf field: InputPeerSelf self = 2;
         */
        self: InputPeerSelf;
    } | {
        oneofKind: "chat";
        /**
         * @generated from protobuf field: InputPeerChat chat = 3;
         */
        chat: InputPeerChat;
    } | {
        oneofKind: "user";
        /**
         * @generated from protobuf field: InputPeerUser user = 4;
         */
        user: InputPeerUser;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message InputPeerSelf
 */
export interface InputPeerSelf {
}
/**
 * @generated from protobuf message InputPeerChat
 */
export interface InputPeerChat {
    /**
     * @generated from protobuf field: int64 chat_id = 1;
     */
    chatId: bigint;
}
/**
 * @generated from protobuf message InputPeerUser
 */
export interface InputPeerUser {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
}
/**
 * @generated from protobuf message Peer
 */
export interface Peer {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "chat";
        /**
         * @generated from protobuf field: PeerChat chat = 2;
         */
        chat: PeerChat;
    } | {
        oneofKind: "user";
        /**
         * @generated from protobuf field: PeerUser user = 3;
         */
        user: PeerUser;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message PeerChat
 */
export interface PeerChat {
    /**
     * @generated from protobuf field: int64 chat_id = 1;
     */
    chatId: bigint;
}
/**
 * @generated from protobuf message PeerUser
 */
export interface PeerUser {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
}
/**
 * @generated from protobuf message User
 */
export interface User {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: optional string first_name = 2;
     */
    firstName?: string;
    /**
     * @generated from protobuf field: optional string last_name = 3;
     */
    lastName?: string;
    /**
     * @generated from protobuf field: optional string username = 4;
     */
    username?: string;
    /**
     * @generated from protobuf field: optional string phone_number = 5;
     */
    phoneNumber?: string;
    /**
     * @generated from protobuf field: optional string email = 6;
     */
    email?: string;
    /**
     * If true, certain fields such as email or phone_number will be missing
     *
     * @generated from protobuf field: optional bool min = 7;
     */
    min?: boolean;
    /**
     * @generated from protobuf field: optional UserStatus status = 8;
     */
    status?: UserStatus;
    /**
     * @generated from protobuf field: optional UserProfilePhoto profile_photo = 9;
     */
    profilePhoto?: UserProfilePhoto;
    // Last message ID
    // optional int64 last_msg_id = 10;

    /**
     * If true, the user has not completed the setup process
     *
     * @generated from protobuf field: optional bool pending_setup = 11;
     */
    pendingSetup?: boolean;
    /**
     * @generated from protobuf field: optional string time_zone = 12;
     */
    timeZone?: string;
}
/**
 * @generated from protobuf message UserProfilePhoto
 */
export interface UserProfilePhoto {
    /**
     * ID of the photo
     *
     * @generated from protobuf field: int64 photo_id = 1;
     */
    photoId: bigint;
    /**
     * Stripped thumbnail of the photo
     *
     * @generated from protobuf field: bytes stripped_thumb = 2;
     */
    strippedThumb: Uint8Array;
}
/**
 * @generated from protobuf message Dialog
 */
export interface Dialog {
    /**
     * @generated from protobuf field: Peer peer = 1;
     */
    peer?: Peer;
    /**
     * @generated from protobuf field: optional int64 space_id = 2;
     */
    spaceId?: bigint;
    /**
     * @generated from protobuf field: optional bool archived = 3;
     */
    archived?: boolean;
    /**
     * @generated from protobuf field: optional bool pinned = 4;
     */
    pinned?: boolean;
    /**
     * @generated from protobuf field: optional int64 read_max_id = 5;
     */
    readMaxId?: bigint;
    /**
     * @generated from protobuf field: optional int32 unread_count = 6;
     */
    unreadCount?: number;
    /**
     * @generated from protobuf field: optional int64 chat_id = 7;
     */
    chatId?: bigint;
}
/**
 * A thread
 *
 * @generated from protobuf message Chat
 */
export interface Chat {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * Title
     *
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * If it belongs to a space
     *
     * @generated from protobuf field: optional int64 space_id = 3;
     */
    spaceId?: bigint;
    /**
     * Optional description
     *
     * @generated from protobuf field: optional string description = 4;
     */
    description?: string;
    /**
     * Emoji to show as the icon, can be null
     *
     * @generated from protobuf field: optional string emoji = 5;
     */
    emoji?: string;
    /**
     * If true, everyone in parent space can accces it
     *
     * @generated from protobuf field: optional bool is_public = 6;
     */
    isPublic?: boolean;
    /**
     * Last message ID
     *
     * @generated from protobuf field: optional int64 last_msg_id = 7;
     */
    lastMsgId?: bigint;
    /**
     * ID of the peer that this chat belongs to
     *
     * @generated from protobuf field: Peer peer_id = 8;
     */
    peerId?: Peer;
    /**
     * Date of creation
     *
     * @generated from protobuf field: optional int64 date = 9;
     */
    date?: bigint;
}
/**
 * @generated from protobuf message Message
 */
export interface Message {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * User ID of the sender
     *
     * @generated from protobuf field: int64 from_id = 2;
     */
    fromId: bigint;
    /**
     * Peer ID of the recipient
     *
     * @generated from protobuf field: Peer peer_id = 3;
     */
    peerId?: Peer;
    /**
     * The "chat ID" of the message, for messages in a chat (deprecated)
     *
     * @generated from protobuf field: int64 chat_id = 4;
     */
    chatId: bigint;
    /**
     * Message text
     *
     * @generated from protobuf field: optional string message = 5;
     */
    message?: string;
    /**
     * Whether the message is outgoing
     *
     * @generated from protobuf field: bool out = 6;
     */
    out: boolean;
    /**
     * Date of the message
     *
     * @generated from protobuf field: int64 date = 7;
     */
    date: bigint;
    /**
     * Whether user is mentioned
     *
     * @generated from protobuf field: optional bool mentioned = 8;
     */
    mentioned?: boolean;
    /**
     * Message ID of the message being replied to
     *
     * @generated from protobuf field: optional int64 reply_to_msg_id = 9;
     */
    replyToMsgId?: bigint;
    /**
     * Media of the message
     *
     * @generated from protobuf field: optional MessageMedia media = 10;
     */
    media?: MessageMedia;
    /**
     * Date of the last edit if edited
     *
     * @generated from protobuf field: optional int64 edit_date = 11;
     */
    editDate?: bigint;
    /**
     * ID of the grouped message if it's part of an album
     *
     * @generated from protobuf field: optional int64 grouped_id = 12;
     */
    groupedId?: bigint;
    /**
     * Attachments of the message
     *
     * @generated from protobuf field: optional MessageAttachments attachments = 13;
     */
    attachments?: MessageAttachments;
    /**
     * Reactions of the message
     *
     * @generated from protobuf field: optional MessageReactions reactions = 14;
     */
    reactions?: MessageReactions;
    /**
     * Whether the message is a sticker
     *
     * @generated from protobuf field: optional bool is_sticker = 15;
     */
    isSticker?: boolean;
}
/**
 * @generated from protobuf message MessageReactions
 */
export interface MessageReactions {
    /**
     * Reactions of the message
     *
     * @generated from protobuf field: repeated Reaction reactions = 1;
     */
    reactions: Reaction[];
}
/**
 * @generated from protobuf message Reaction
 */
export interface Reaction {
    /**
     * Emoji of the reaction
     *
     * @generated from protobuf field: string emoji = 1;
     */
    emoji: string;
    /**
     * ID of the user who reacted
     *
     * @generated from protobuf field: int64 user_id = 2;
     */
    userId: bigint;
    /**
     * ID of the message that this reaction is for
     *
     * @generated from protobuf field: int64 message_id = 3;
     */
    messageId: bigint;
    /**
     * ID of the chat that this reaction is for
     *
     * @generated from protobuf field: int64 chat_id = 4;
     */
    chatId: bigint;
    /**
     * Date of the reaction
     *
     * @generated from protobuf field: int64 date = 5;
     */
    date: bigint;
}
/**
 * @generated from protobuf message Member
 */
export interface Member {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 space_id = 2;
     */
    spaceId: bigint;
    /**
     * @generated from protobuf field: int64 user_id = 3;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: optional Member.Role role = 4;
     */
    role?: Member_Role;
    /**
     * Date of joining
     *
     * @generated from protobuf field: int64 date = 5;
     */
    date: bigint;
}
/**
 * @generated from protobuf enum Member.Role
 */
export enum Member_Role {
    /**
     * @generated from protobuf enum value: OWNER = 0;
     */
    OWNER = 0,
    /**
     * @generated from protobuf enum value: ADMIN = 1;
     */
    ADMIN = 1,
    /**
     * @generated from protobuf enum value: MEMBER = 2;
     */
    MEMBER = 2
}
/**
 * @generated from protobuf message Space
 */
export interface Space {
    /**
     * ID
     *
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * Name of the space
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * Whether the current user is the creator of the space
     *
     * @generated from protobuf field: bool creator = 3;
     */
    creator: boolean;
    /**
     * Date of creation
     *
     * @generated from protobuf field: int64 date = 4;
     */
    date: bigint;
}
/**
 * Add reaction input
 *
 * @generated from protobuf message AddReactionInput
 */
export interface AddReactionInput {
    /**
     * Emoji of the reaction
     *
     * @generated from protobuf field: string emoji = 1;
     */
    emoji: string;
    /**
     * ID of the message that this reaction is for
     *
     * @generated from protobuf field: int64 message_id = 2;
     */
    messageId: bigint;
    /**
     * ID of the peer that this reaction is for
     *
     * @generated from protobuf field: InputPeer peer_id = 3;
     */
    peerId?: InputPeer;
}
/**
 * Add reaction result
 *
 * @generated from protobuf message AddReactionResult
 */
export interface AddReactionResult {
    /**
     * @generated from protobuf field: repeated Update updates = 1;
     */
    updates: Update[];
}
/**
 * Delete reaction input
 *
 * @generated from protobuf message DeleteReactionInput
 */
export interface DeleteReactionInput {
    /**
     * @generated from protobuf field: string emoji = 1;
     */
    emoji: string;
    /**
     * @generated from protobuf field: InputPeer peer_id = 2;
     */
    peerId?: InputPeer;
    /**
     * @generated from protobuf field: int64 message_id = 3;
     */
    messageId: bigint;
}
/**
 * @generated from protobuf message DeleteReactionResult
 */
export interface DeleteReactionResult {
    /**
     * @generated from protobuf field: repeated Update updates = 1;
     */
    updates: Update[];
}
/**
 * @generated from protobuf message MessageAttachments
 */
export interface MessageAttachments {
    /**
     * @generated from protobuf field: repeated MessageAttachment attachments = 1;
     */
    attachments: MessageAttachment[];
}
/**
 * @generated from protobuf message MessageAttachment
 */
export interface MessageAttachment {
    /**
     * ID
     *
     * @generated from protobuf field: int64 id = 4;
     */
    id: bigint;
    /**
     * @generated from protobuf oneof: attachment
     */
    attachment: {
        oneofKind: "externalTask";
        /**
         * @generated from protobuf field: MessageAttachmentExternalTask external_task = 2;
         */
        externalTask: MessageAttachmentExternalTask;
    } | {
        oneofKind: "urlPreview";
        /**
         * @generated from protobuf field: UrlPreview url_preview = 3;
         */
        urlPreview: UrlPreview;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message UrlPreview
 */
export interface UrlPreview {
    /**
     * ID of external task in our database
     *
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * URL of the link
     *
     * @generated from protobuf field: optional string url = 2;
     */
    url?: string;
    /**
     * Site name of the link
     *
     * @generated from protobuf field: optional string site_name = 3;
     */
    siteName?: string;
    /**
     * Title of the link
     *
     * @generated from protobuf field: optional string title = 4;
     */
    title?: string;
    /**
     * Description of the link
     *
     * @generated from protobuf field: optional string description = 5;
     */
    description?: string;
    /**
     * Image ID of the link
     *
     * @generated from protobuf field: optional Photo photo = 6;
     */
    photo?: Photo;
    /**
     * Duration of the content
     *
     * @generated from protobuf field: optional int64 duration = 7;
     */
    duration?: bigint;
}
/**
 * @generated from protobuf message MessageAttachmentExternalTask
 */
export interface MessageAttachmentExternalTask {
    /**
     * ID of external task in our database
     *
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * ID of the task in the external application
     *
     * @generated from protobuf field: string task_id = 2;
     */
    taskId: string;
    /**
     * Application name
     *
     * @generated from protobuf field: string application = 3;
     */
    application: string;
    /**
     * Title of the task/issue
     *
     * @generated from protobuf field: string title = 4;
     */
    title: string;
    /**
     * Status of the task
     *
     * @generated from protobuf field: MessageAttachmentExternalTask.Status status = 5;
     */
    status: MessageAttachmentExternalTask_Status;
    /**
     * Assigned user ID in Inline
     *
     * @generated from protobuf field: int64 assigned_user_id = 6;
     */
    assignedUserId: bigint;
    /**
     * URL of the task/issue in the external application
     *
     * @generated from protobuf field: string url = 7;
     */
    url: string;
    /**
     * Number/code of the task/issue in the external application
     *
     * @generated from protobuf field: string number = 8;
     */
    number: string;
    /**
     * Date of creation/addition in Inline
     *
     * @generated from protobuf field: int64 date = 9;
     */
    date: bigint;
}
/**
 * @generated from protobuf enum MessageAttachmentExternalTask.Status
 */
export enum MessageAttachmentExternalTask_Status {
    /**
     * @generated from protobuf enum value: STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: STATUS_BACKLOG = 1;
     */
    BACKLOG = 1,
    /**
     * @generated from protobuf enum value: STATUS_TODO = 2;
     */
    TODO = 2,
    /**
     * @generated from protobuf enum value: STATUS_IN_PROGRESS = 3;
     */
    IN_PROGRESS = 3,
    /**
     * @generated from protobuf enum value: STATUS_DONE = 4;
     */
    DONE = 4,
    /**
     * @generated from protobuf enum value: STATUS_CANCELLED = 5;
     */
    CANCELLED = 5
}
/**
 * WIP: add document, audio, video.
 *
 * @generated from protobuf message MessageMedia
 */
export interface MessageMedia {
    /**
     * @generated from protobuf oneof: media
     */
    media: {
        oneofKind: "photo";
        /**
         * @generated from protobuf field: MessagePhoto photo = 1;
         */
        photo: MessagePhoto;
    } | {
        oneofKind: "video";
        /**
         * @generated from protobuf field: MessageVideo video = 2;
         */
        video: MessageVideo;
    } | {
        oneofKind: "document";
        /**
         * @generated from protobuf field: MessageDocument document = 3;
         */
        document: MessageDocument;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message MessagePhoto
 */
export interface MessagePhoto {
    /**
     * @generated from protobuf field: Photo photo = 1;
     */
    photo?: Photo;
}
/**
 * @generated from protobuf message MessageVideo
 */
export interface MessageVideo {
    /**
     * @generated from protobuf field: Video video = 1;
     */
    video?: Video;
}
/**
 * @generated from protobuf message MessageDocument
 */
export interface MessageDocument {
    /**
     * @generated from protobuf field: Document document = 1;
     */
    document?: Document;
}
/**
 * @generated from protobuf message Video
 */
export interface Video {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * Date of upload
     *
     * @generated from protobuf field: int64 date = 2;
     */
    date: bigint;
    /**
     * Width of the video
     *
     * @generated from protobuf field: int32 w = 3;
     */
    w: number;
    /**
     * Height of the video
     *
     * @generated from protobuf field: int32 h = 4;
     */
    h: number;
    /**
     * Duration of the video in seconds
     *
     * @generated from protobuf field: int32 duration = 5;
     */
    duration: number;
    /**
     * File size
     *
     * @generated from protobuf field: int32 size = 6;
     */
    size: number;
    /**
     * Thumbnail of the video
     *
     * @generated from protobuf field: optional Photo photo = 7;
     */
    photo?: Photo;
    /**
     * CDN URL
     *
     * @generated from protobuf field: optional string cdn_url = 8;
     */
    cdnUrl?: string;
}
/**
 * @generated from protobuf message Document
 */
export interface Document {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * Original file name
     *
     * @generated from protobuf field: string file_name = 2;
     */
    fileName: string;
    /**
     * MIME type of the file
     *
     * @generated from protobuf field: string mime_type = 3;
     */
    mimeType: string;
    /**
     * File size
     *
     * @generated from protobuf field: int32 size = 4;
     */
    size: number;
    /**
     * CDN URL
     *
     * @generated from protobuf field: optional string cdn_url = 5;
     */
    cdnUrl?: string;
    /**
     * Date of upload
     *
     * @generated from protobuf field: int64 date = 6;
     */
    date: bigint;
}
/**
 * Photo for message media, profile photo, space photo, or chat photo
 *
 * @generated from protobuf message Photo
 */
export interface Photo {
    /**
     * ID
     *
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * Date of upload
     *
     * @generated from protobuf field: int64 date = 2;
     */
    date: bigint;
    /**
     * @generated from protobuf field: repeated PhotoSize sizes = 3;
     */
    sizes: PhotoSize[];
    /**
     * Format of the photo
     *
     * @generated from protobuf field: Photo.Format format = 4;
     */
    format: Photo_Format;
    /**
     * Unique identifier of the file
     *
     * @generated from protobuf field: optional string file_unique_id = 100;
     */
    fileUniqueId?: string;
}
/**
 * @generated from protobuf enum Photo.Format
 */
export enum Photo_Format {
    /**
     * @generated from protobuf enum value: FORMAT_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: FORMAT_JPEG = 1;
     */
    JPEG = 1,
    /**
     * @generated from protobuf enum value: FORMAT_PNG = 2;
     */
    PNG = 2
}
/**
 * @generated from protobuf message PhotoSize
 */
export interface PhotoSize {
    /**
     * * Thumbnail type.
     * Currently supported:
     * - "b" - small box 140x140
     * - "c" - medium box 320x320
     * - "d" - regular box 800x800
     * - "f" - large box 2560x2560
     * - "s" - stripped (tiny version embedded in bytes)
     * - "y" - ??
     * - "x" - small cropped ??
     * - "w" - medium cropped ??
     * - "v" - ??
     *
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * Width in pixels
     *
     * @generated from protobuf field: int32 w = 2;
     */
    w: number;
    /**
     * Height in pixels
     *
     * @generated from protobuf field: int32 h = 3;
     */
    h: number;
    /**
     * File size
     *
     * @generated from protobuf field: int32 size = 4;
     */
    size: number;
    /**
     * Bytes for stripped size used in blur thumbnails
     *
     * @generated from protobuf field: optional bytes bytes = 5;
     */
    bytes?: Uint8Array;
    /**
     * CDN URL
     *
     * @generated from protobuf field: optional string cdn_url = 6;
     */
    cdnUrl?: string;
}
// --- Application RPC Functions ---

/**
 * @generated from protobuf message RpcError
 */
export interface RpcError {
    /**
     * @generated from protobuf field: uint64 req_msg_id = 1;
     */
    reqMsgId: bigint;
    /**
     * @generated from protobuf field: RpcError.Code error_code = 2;
     */
    errorCode: RpcError_Code;
    /**
     * @generated from protobuf field: string message = 3;
     */
    message: string;
    /**
     * @generated from protobuf field: int32 code = 4;
     */
    code: number;
}
/**
 * Type of error
 *
 * @generated from protobuf enum RpcError.Code
 */
export enum RpcError_Code {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: BAD_REQUEST = 1;
     */
    BAD_REQUEST = 1,
    /**
     * @generated from protobuf enum value: UNAUTHENTICATED = 2;
     */
    UNAUTHENTICATED = 2,
    /**
     * @generated from protobuf enum value: RATE_LIMIT = 3;
     */
    RATE_LIMIT = 3,
    /**
     * @generated from protobuf enum value: INTERNAL_ERROR = 4;
     */
    INTERNAL_ERROR = 4,
    /**
     * @generated from protobuf enum value: PEER_ID_INVALID = 5;
     */
    PEER_ID_INVALID = 5,
    /**
     * @generated from protobuf enum value: MESSAGE_ID_INVALID = 6;
     */
    MESSAGE_ID_INVALID = 6,
    /**
     * @generated from protobuf enum value: USER_ID_INVALID = 7;
     */
    USER_ID_INVALID = 7,
    /**
     * @generated from protobuf enum value: USER_ALREADY_MEMBER = 8;
     */
    USER_ALREADY_MEMBER = 8,
    /**
     * @generated from protobuf enum value: SPACE_ID_INVALID = 9;
     */
    SPACE_ID_INVALID = 9,
    /**
     * @generated from protobuf enum value: CHAT_ID_INVALID = 10;
     */
    CHAT_ID_INVALID = 10,
    /**
     * @generated from protobuf enum value: EMAIL_INVALID = 11;
     */
    EMAIL_INVALID = 11,
    /**
     * @generated from protobuf enum value: PHONE_NUMBER_INVALID = 12;
     */
    PHONE_NUMBER_INVALID = 12,
    /**
     * @generated from protobuf enum value: SPACE_ADMIN_REQUIRED = 13;
     */
    SPACE_ADMIN_REQUIRED = 13,
    /**
     * @generated from protobuf enum value: SPACE_OWNER_REQUIRED = 14;
     */
    SPACE_OWNER_REQUIRED = 14
}
/**
 * @generated from protobuf message RpcCall
 */
export interface RpcCall {
    /**
     * @generated from protobuf field: Method method = 1;
     */
    method: Method;
    /**
     * @generated from protobuf oneof: input
     */
    input: {
        oneofKind: "getMe";
        /**
         * @generated from protobuf field: GetMeInput getMe = 2;
         */
        getMe: GetMeInput;
    } | {
        oneofKind: "getPeerPhoto";
        /**
         * @generated from protobuf field: GetPeerPhotoInput getPeerPhoto = 3;
         */
        getPeerPhoto: GetPeerPhotoInput;
    } | {
        oneofKind: "deleteMessages";
        /**
         * @generated from protobuf field: DeleteMessagesInput deleteMessages = 4;
         */
        deleteMessages: DeleteMessagesInput;
    } | {
        oneofKind: "sendMessage";
        /**
         * @generated from protobuf field: SendMessageInput sendMessage = 5;
         */
        sendMessage: SendMessageInput;
    } | {
        oneofKind: "getChatHistory";
        /**
         * @generated from protobuf field: GetChatHistoryInput getChatHistory = 6;
         */
        getChatHistory: GetChatHistoryInput;
    } | {
        oneofKind: "addReaction";
        /**
         * @generated from protobuf field: AddReactionInput addReaction = 7;
         */
        addReaction: AddReactionInput;
    } | {
        oneofKind: "deleteReaction";
        /**
         * @generated from protobuf field: DeleteReactionInput deleteReaction = 8;
         */
        deleteReaction: DeleteReactionInput;
    } | {
        oneofKind: "editMessage";
        /**
         * @generated from protobuf field: EditMessageInput editMessage = 9;
         */
        editMessage: EditMessageInput;
    } | {
        oneofKind: "createChat";
        /**
         * @generated from protobuf field: CreateChatInput createChat = 10;
         */
        createChat: CreateChatInput;
    } | {
        oneofKind: "getSpaceMembers";
        /**
         * @generated from protobuf field: GetSpaceMembersInput getSpaceMembers = 11;
         */
        getSpaceMembers: GetSpaceMembersInput;
    } | {
        oneofKind: "deleteChat";
        /**
         * @generated from protobuf field: DeleteChatInput deleteChat = 12;
         */
        deleteChat: DeleteChatInput;
    } | {
        oneofKind: "inviteToSpace";
        /**
         * @generated from protobuf field: InviteToSpaceInput inviteToSpace = 13;
         */
        inviteToSpace: InviteToSpaceInput;
    } | {
        oneofKind: "getChatParticipants";
        /**
         * @generated from protobuf field: GetChatParticipantsInput getChatParticipants = 14;
         */
        getChatParticipants: GetChatParticipantsInput;
    } | {
        oneofKind: "addChatParticipant";
        /**
         * @generated from protobuf field: AddChatParticipantInput addChatParticipant = 15;
         */
        addChatParticipant: AddChatParticipantInput;
    } | {
        oneofKind: "removeChatParticipant";
        /**
         * @generated from protobuf field: RemoveChatParticipantInput removeChatParticipant = 16;
         */
        removeChatParticipant: RemoveChatParticipantInput;
    } | {
        oneofKind: "translateMessages";
        /**
         * @generated from protobuf field: TranslateMessagesInput translateMessages = 17;
         */
        translateMessages: TranslateMessagesInput;
    } | {
        oneofKind: "getChats";
        /**
         * @generated from protobuf field: GetChatsInput getChats = 18;
         */
        getChats: GetChatsInput;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message RpcResult
 */
export interface RpcResult {
    /**
     * @generated from protobuf field: uint64 req_msg_id = 1;
     */
    reqMsgId: bigint;
    /**
     * @generated from protobuf oneof: result
     */
    result: {
        oneofKind: "getMe";
        /**
         * @generated from protobuf field: GetMeResult getMe = 2;
         */
        getMe: GetMeResult;
    } | {
        oneofKind: "getPeerPhoto";
        /**
         * @generated from protobuf field: GetPeerPhotoResult getPeerPhoto = 3;
         */
        getPeerPhoto: GetPeerPhotoResult;
    } | {
        oneofKind: "deleteMessages";
        /**
         * @generated from protobuf field: DeleteMessagesResult deleteMessages = 4;
         */
        deleteMessages: DeleteMessagesResult;
    } | {
        oneofKind: "sendMessage";
        /**
         * @generated from protobuf field: SendMessageResult sendMessage = 5;
         */
        sendMessage: SendMessageResult;
    } | {
        oneofKind: "getChatHistory";
        /**
         * @generated from protobuf field: GetChatHistoryResult getChatHistory = 6;
         */
        getChatHistory: GetChatHistoryResult;
    } | {
        oneofKind: "addReaction";
        /**
         * @generated from protobuf field: AddReactionResult addReaction = 7;
         */
        addReaction: AddReactionResult;
    } | {
        oneofKind: "deleteReaction";
        /**
         * @generated from protobuf field: DeleteReactionResult deleteReaction = 8;
         */
        deleteReaction: DeleteReactionResult;
    } | {
        oneofKind: "editMessage";
        /**
         * @generated from protobuf field: EditMessageResult editMessage = 9;
         */
        editMessage: EditMessageResult;
    } | {
        oneofKind: "createChat";
        /**
         * @generated from protobuf field: CreateChatResult createChat = 10;
         */
        createChat: CreateChatResult;
    } | {
        oneofKind: "getSpaceMembers";
        /**
         * @generated from protobuf field: GetSpaceMembersResult getSpaceMembers = 11;
         */
        getSpaceMembers: GetSpaceMembersResult;
    } | {
        oneofKind: "deleteChat";
        /**
         * @generated from protobuf field: DeleteChatResult deleteChat = 12;
         */
        deleteChat: DeleteChatResult;
    } | {
        oneofKind: "inviteToSpace";
        /**
         * @generated from protobuf field: InviteToSpaceResult inviteToSpace = 13;
         */
        inviteToSpace: InviteToSpaceResult;
    } | {
        oneofKind: "getChatParticipants";
        /**
         * @generated from protobuf field: GetChatParticipantsResult getChatParticipants = 14;
         */
        getChatParticipants: GetChatParticipantsResult;
    } | {
        oneofKind: "addChatParticipant";
        /**
         * @generated from protobuf field: AddChatParticipantResult addChatParticipant = 15;
         */
        addChatParticipant: AddChatParticipantResult;
    } | {
        oneofKind: "removeChatParticipant";
        /**
         * @generated from protobuf field: RemoveChatParticipantResult removeChatParticipant = 16;
         */
        removeChatParticipant: RemoveChatParticipantResult;
    } | {
        oneofKind: "translateMessages";
        /**
         * @generated from protobuf field: TranslateMessagesResult translateMessages = 17;
         */
        translateMessages: TranslateMessagesResult;
    } | {
        oneofKind: "getChats";
        /**
         * @generated from protobuf field: GetChatsResult getChats = 18;
         */
        getChats: GetChatsResult;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message GetChatsInput
 */
export interface GetChatsInput {
}
/**
 * @generated from protobuf message GetChatsResult
 */
export interface GetChatsResult {
    /**
     * Dialogs
     *
     * @generated from protobuf field: repeated Dialog dialogs = 1;
     */
    dialogs: Dialog[];
    /**
     * Chats
     *
     * @generated from protobuf field: repeated Chat chats = 2;
     */
    chats: Chat[];
    /**
     * Spaces referenced in the chats
     *
     * @generated from protobuf field: repeated Space spaces = 3;
     */
    spaces: Space[];
    /**
     * Users referenced in the chats or messages
     *
     * @generated from protobuf field: repeated User users = 4;
     */
    users: User[];
    /**
     * Messages referenced in the chats
     *
     * @generated from protobuf field: repeated Message messages = 5;
     */
    messages: Message[];
}
/**
 * @generated from protobuf message TranslateMessagesInput
 */
export interface TranslateMessagesInput {
    /**
     * ID of the peer
     *
     * @generated from protobuf field: InputPeer peer_id = 1;
     */
    peerId?: InputPeer;
    /**
     * IDs of the messages to translate, these must not have gaps of more than 50
     * messages
     *
     * @generated from protobuf field: repeated int64 message_ids = 2;
     */
    messageIds: bigint[];
    // // Only return messages starting from the specified message ID
    // int32 offset_id = 2;

    // // Number of messages to return
    // int32 limit = 3;

    /**
     * Language code to translate to
     *
     * @generated from protobuf field: string language = 4;
     */
    language: string;
}
/**
 * @generated from protobuf message TranslateMessagesResult
 */
export interface TranslateMessagesResult {
    /**
     * Translated messages
     *
     * @generated from protobuf field: repeated MessageTranslation translations = 1;
     */
    translations: MessageTranslation[];
}
/**
 * @generated from protobuf message MessageTranslation
 */
export interface MessageTranslation {
    /**
     * ID of the message
     *
     * @generated from protobuf field: int64 message_id = 1;
     */
    messageId: bigint;
    /**
     * Language code of the translation
     *
     * @generated from protobuf field: string language = 2;
     */
    language: string;
    /**
     * Translation of the message
     *
     * @generated from protobuf field: string translation = 3;
     */
    translation: string;
    /**
     * Date of translation
     *
     * @generated from protobuf field: int64 date = 4;
     */
    date: bigint;
}
/**
 * @generated from protobuf message GetMeInput
 */
export interface GetMeInput {
}
/**
 * @generated from protobuf message GetMeResult
 */
export interface GetMeResult {
    /**
     * @generated from protobuf field: User user = 1;
     */
    user?: User;
}
/**
 * @generated from protobuf message GetPeerPhotoInput
 */
export interface GetPeerPhotoInput {
    /**
     * @generated from protobuf field: InputPeer peer_id = 1;
     */
    peerId?: InputPeer;
    /**
     * @generated from protobuf field: int64 photo_id = 2;
     */
    photoId: bigint;
}
/**
 * @generated from protobuf message GetPeerPhotoResult
 */
export interface GetPeerPhotoResult {
    /**
     * @generated from protobuf field: Photo photo = 1;
     */
    photo?: Photo;
}
/**
 * @generated from protobuf message DeleteMessagesInput
 */
export interface DeleteMessagesInput {
    /**
     * @generated from protobuf field: repeated int64 message_ids = 1;
     */
    messageIds: bigint[];
    /**
     * @generated from protobuf field: InputPeer peer_id = 2;
     */
    peerId?: InputPeer;
}
/**
 * @generated from protobuf message DeleteMessagesResult
 */
export interface DeleteMessagesResult {
    /**
     * @generated from protobuf field: repeated Update updates = 1;
     */
    updates: Update[];
}
/**
 * @generated from protobuf message EditMessageInput
 */
export interface EditMessageInput {
    /**
     * @generated from protobuf field: int64 message_id = 1;
     */
    messageId: bigint;
    /**
     * @generated from protobuf field: InputPeer peer_id = 2;
     */
    peerId?: InputPeer;
    /**
     * @generated from protobuf field: string text = 3;
     */
    text: string;
}
/**
 * @generated from protobuf message EditMessageResult
 */
export interface EditMessageResult {
    /**
     * @generated from protobuf field: repeated Update updates = 1;
     */
    updates: Update[];
}
/**
 * @generated from protobuf message InputMedia
 */
export interface InputMedia {
    /**
     * @generated from protobuf oneof: media
     */
    media: {
        oneofKind: "photo";
        /**
         * @generated from protobuf field: InputMediaPhoto photo = 1;
         */
        photo: InputMediaPhoto;
    } | {
        oneofKind: "video";
        /**
         * @generated from protobuf field: InputMediaVideo video = 2;
         */
        video: InputMediaVideo;
    } | {
        oneofKind: "document";
        /**
         * @generated from protobuf field: InputMediaDocument document = 3;
         */
        document: InputMediaDocument;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message InputMediaPhoto
 */
export interface InputMediaPhoto {
    /**
     * ID of the photo that we have uploaded
     *
     * @generated from protobuf field: int64 photo_id = 1;
     */
    photoId: bigint;
}
/**
 * @generated from protobuf message InputMediaVideo
 */
export interface InputMediaVideo {
    /**
     * ID of the video that we have uploaded
     *
     * @generated from protobuf field: int64 video_id = 1;
     */
    videoId: bigint;
}
/**
 * @generated from protobuf message InputMediaDocument
 */
export interface InputMediaDocument {
    /**
     * ID of the document that we have uploaded
     *
     * @generated from protobuf field: int64 document_id = 1;
     */
    documentId: bigint;
}
/**
 * @generated from protobuf message SendMessageInput
 */
export interface SendMessageInput {
    /**
     * @generated from protobuf field: InputPeer peer_id = 1;
     */
    peerId?: InputPeer;
    /**
     * Message text or caption
     *
     * @generated from protobuf field: optional string message = 2;
     */
    message?: string;
    /**
     * Message ID of the message being replied to
     *
     * @generated from protobuf field: optional int64 reply_to_msg_id = 3;
     */
    replyToMsgId?: bigint;
    /**
     * Random ID to prevent duplicate messages
     *
     * @generated from protobuf field: optional int64 random_id = 4;
     */
    randomId?: bigint;
    /**
     * Media to send
     *
     * @generated from protobuf field: optional InputMedia media = 5;
     */
    media?: InputMedia;
    /**
     * Date of sending (until we fix the client reordering)
     *
     * @generated from protobuf field: optional int64 temporary_send_date = 1000;
     */
    temporarySendDate?: bigint;
    /**
     * Whether the message is a sticker
     *
     * @generated from protobuf field: optional bool is_sticker = 6;
     */
    isSticker?: boolean;
}
/**
 * @generated from protobuf message SendMessageResult
 */
export interface SendMessageResult {
    /**
     * @generated from protobuf field: repeated Update updates = 2;
     */
    updates: Update[];
}
/**
 * @generated from protobuf message GetChatHistoryInput
 */
export interface GetChatHistoryInput {
    /**
     * @generated from protobuf field: InputPeer peer_id = 1;
     */
    peerId?: InputPeer;
    /**
     * ID of the message to start from
     *
     * @generated from protobuf field: optional int64 offset_id = 2;
     */
    offsetId?: bigint;
    /**
     * Number of messages to return
     *
     * @generated from protobuf field: optional int32 limit = 3;
     */
    limit?: number;
}
/**
 * @generated from protobuf message GetChatHistoryResult
 */
export interface GetChatHistoryResult {
    /**
     * @generated from protobuf field: repeated Message messages = 1;
     */
    messages: Message[];
}
/**
 * @generated from protobuf message InputChatParticipant
 */
export interface InputChatParticipant {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
}
/**
 * @generated from protobuf message CreateChatInput
 */
export interface CreateChatInput {
    /**
     * Required title
     *
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * Parent space ID
     *
     * @generated from protobuf field: optional int64 space_id = 2;
     */
    spaceId?: bigint;
    /**
     * Optional description of the thread
     *
     * @generated from protobuf field: optional string description = 3;
     */
    description?: string;
    /**
     * Emoji to show as the icon, can be null
     *
     * @generated from protobuf field: optional string emoji = 4;
     */
    emoji?: string;
    /**
     * If true, everyone in parent space can accces it
     *
     * @generated from protobuf field: bool is_public = 5;
     */
    isPublic: boolean;
    /**
     * For public threads, it must be an empty list
     *
     * @generated from protobuf field: repeated InputChatParticipant participants = 6;
     */
    participants: InputChatParticipant[];
}
/**
 * @generated from protobuf message CreateChatResult
 */
export interface CreateChatResult {
    /**
     * @generated from protobuf field: Chat chat = 1;
     */
    chat?: Chat;
    /**
     * @generated from protobuf field: Dialog dialog = 2;
     */
    dialog?: Dialog;
}
/**
 * @generated from protobuf message GetSpaceMembersInput
 */
export interface GetSpaceMembersInput {
    /**
     * @generated from protobuf field: int64 space_id = 1;
     */
    spaceId: bigint;
}
/**
 * @generated from protobuf message GetSpaceMembersResult
 */
export interface GetSpaceMembersResult {
    /**
     * @generated from protobuf field: repeated Member members = 1;
     */
    members: Member[];
    /**
     * @generated from protobuf field: repeated User users = 2;
     */
    users: User[];
}
/**
 * / ------------------------------
 * Updates Subsystem
 *
 * @generated from protobuf message Update
 */
export interface Update {
    /**
     * @generated from protobuf oneof: update
     */
    update: {
        oneofKind: "newMessage";
        /**
         * @generated from protobuf field: UpdateNewMessage new_message = 4;
         */
        newMessage: UpdateNewMessage;
    } | {
        oneofKind: "editMessage";
        /**
         * @generated from protobuf field: UpdateEditMessage edit_message = 5;
         */
        editMessage: UpdateEditMessage;
    } | {
        oneofKind: "updateMessageId";
        /**
         * @generated from protobuf field: UpdateMessageId update_message_id = 6;
         */
        updateMessageId: UpdateMessageId;
    } | {
        oneofKind: "deleteMessages";
        /**
         * @generated from protobuf field: UpdateDeleteMessages delete_messages = 7;
         */
        deleteMessages: UpdateDeleteMessages;
    } | {
        oneofKind: "updateComposeAction";
        /**
         * @generated from protobuf field: UpdateComposeAction update_compose_action = 8;
         */
        updateComposeAction: UpdateComposeAction;
    } | {
        oneofKind: "updateUserStatus";
        /**
         * @generated from protobuf field: UpdateUserStatus update_user_status = 9;
         */
        updateUserStatus: UpdateUserStatus;
    } | {
        oneofKind: "messageAttachment";
        /**
         * @generated from protobuf field: UpdateMessageAttachment message_attachment = 10;
         */
        messageAttachment: UpdateMessageAttachment;
    } | {
        oneofKind: "updateReaction";
        /**
         * @generated from protobuf field: UpdateReaction update_reaction = 11;
         */
        updateReaction: UpdateReaction;
    } | {
        oneofKind: "deleteReaction";
        /**
         * @generated from protobuf field: UpdateDeleteReaction delete_reaction = 12;
         */
        deleteReaction: UpdateDeleteReaction;
    } | {
        oneofKind: "participantAdd";
        /**
         * @generated from protobuf field: UpdateChatParticipantAdd participant_add = 13;
         */
        participantAdd: UpdateChatParticipantAdd;
    } | {
        oneofKind: "participantDelete";
        /**
         * @generated from protobuf field: UpdateChatParticipantDelete participant_delete = 14;
         */
        participantDelete: UpdateChatParticipantDelete;
    } | {
        oneofKind: "newChat";
        /**
         * @generated from protobuf field: UpdateNewChat new_chat = 15;
         */
        newChat: UpdateNewChat;
    } | {
        oneofKind: "deleteChat";
        /**
         * @generated from protobuf field: UpdateDeleteChat delete_chat = 16;
         */
        deleteChat: UpdateDeleteChat;
    } | {
        oneofKind: "spaceMemberAdd";
        /**
         * @generated from protobuf field: UpdateSpaceMemberAdd space_member_add = 17;
         */
        spaceMemberAdd: UpdateSpaceMemberAdd;
    } | {
        oneofKind: "spaceMemberDelete";
        /**
         * @generated from protobuf field: UpdateSpaceMemberDelete space_member_delete = 18;
         */
        spaceMemberDelete: UpdateSpaceMemberDelete;
    } | {
        oneofKind: "joinSpace";
        /**
         * @generated from protobuf field: UpdateJoinSpace join_space = 19;
         */
        joinSpace: UpdateJoinSpace;
    } | {
        oneofKind: "updateReadMaxId";
        /**
         * @generated from protobuf field: UpdateReadMaxId update_read_max_id = 20;
         */
        updateReadMaxId: UpdateReadMaxId;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Update when a new space member is added
 *
 * @generated from protobuf message UpdateSpaceMemberAdd
 */
export interface UpdateSpaceMemberAdd {
    /**
     * @generated from protobuf field: Member member = 1;
     */
    member?: Member;
    /**
     * @generated from protobuf field: User user = 2;
     */
    user?: User;
}
/**
 * Update when a space member is removed
 *
 * todo
 *
 * @generated from protobuf message UpdateSpaceMemberDelete
 */
export interface UpdateSpaceMemberDelete {
}
/**
 * Update when we joined a space
 *
 * @generated from protobuf message UpdateJoinSpace
 */
export interface UpdateJoinSpace {
    /**
     * @generated from protobuf field: Space space = 1;
     */
    space?: Space;
    /**
     * @generated from protobuf field: Member member = 2;
     */
    member?: Member;
}
/**
 * Update when we read up to a certain message ID
 *
 * @generated from protobuf message UpdateReadMaxId
 */
export interface UpdateReadMaxId {
    /**
     * Peer ID
     *
     * @generated from protobuf field: Peer peer_id = 1;
     */
    peerId?: Peer;
    // Chat ID
    // int64 chat_id = 2;

    /**
     * Read max ID
     *
     * @generated from protobuf field: int64 read_max_id = 3;
     */
    readMaxId: bigint;
    /**
     * Still unread count
     *
     * @generated from protobuf field: int32 unread_count = 4;
     */
    unreadCount: number;
}
/**
 * Update when a new chat is created either in space or a private chat
 *
 * @generated from protobuf message UpdateNewChat
 */
export interface UpdateNewChat {
    /**
     * Chat
     *
     * @generated from protobuf field: Chat chat = 1;
     */
    chat?: Chat;
    // Dialog for the chat
    // Dialog dialog = 2;

    /**
     * If private chat
     *
     * @generated from protobuf field: optional User user = 3;
     */
    user?: User;
}
/**
 * Update when a chat is deleted
 *
 * @generated from protobuf message UpdateDeleteChat
 */
export interface UpdateDeleteChat {
    /**
     * Peer ID
     *
     * @generated from protobuf field: Peer peer_id = 1;
     */
    peerId?: Peer;
}
/**
 * Update when a new message is created
 *
 * @generated from protobuf message UpdateNewMessage
 */
export interface UpdateNewMessage {
    /**
     * @generated from protobuf field: Message message = 1;
     */
    message?: Message;
}
/**
 * Update when a message is edited
 *
 * @generated from protobuf message UpdateEditMessage
 */
export interface UpdateEditMessage {
    /**
     * @generated from protobuf field: Message message = 1;
     */
    message?: Message;
}
/**
 * Update when messages are deleted
 *
 * @generated from protobuf message UpdateDeleteMessages
 */
export interface UpdateDeleteMessages {
    /**
     * @generated from protobuf field: repeated int64 message_ids = 1;
     */
    messageIds: bigint[];
    /**
     * @generated from protobuf field: Peer peer_id = 2;
     */
    peerId?: Peer;
}
/**
 * Update when a message ID is updated after sending
 *
 * @generated from protobuf message UpdateMessageId
 */
export interface UpdateMessageId {
    /**
     * @generated from protobuf field: int64 message_id = 1;
     */
    messageId: bigint;
    /**
     * @generated from protobuf field: int64 random_id = 2;
     */
    randomId: bigint;
}
/**
 * Update when a user starts or stops composing a message for typing, uploading
 * a photo, etc
 *
 * @generated from protobuf message UpdateComposeAction
 */
export interface UpdateComposeAction {
    /**
     * User ID of the user who is composing the message
     *
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * Peer ID of the peer user is composing the message to
     *
     * @generated from protobuf field: Peer peer_id = 2;
     */
    peerId?: Peer;
    /**
     * Action of the user (typing, etc)
     *
     * @generated from protobuf field: UpdateComposeAction.ComposeAction action = 3;
     */
    action: UpdateComposeAction_ComposeAction;
}
/**
 * @generated from protobuf enum UpdateComposeAction.ComposeAction
 */
export enum UpdateComposeAction_ComposeAction {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: TYPING = 1;
     */
    TYPING = 1,
    /**
     * @generated from protobuf enum value: UPLOADING_PHOTO = 2;
     */
    UPLOADING_PHOTO = 2,
    /**
     * @generated from protobuf enum value: UPLOADING_DOCUMENT = 3;
     */
    UPLOADING_DOCUMENT = 3,
    /**
     * @generated from protobuf enum value: UPLOADING_VIDEO = 4;
     */
    UPLOADING_VIDEO = 4
}
/**
 * @generated from protobuf message UpdateMessageAttachment
 */
export interface UpdateMessageAttachment {
    /**
     * @generated from protobuf field: MessageAttachment attachment = 1;
     */
    attachment?: MessageAttachment;
    /**
     * @generated from protobuf field: int64 message_id = 2;
     */
    messageId: bigint;
    /**
     * @generated from protobuf field: Peer peer_id = 3;
     */
    peerId?: Peer;
    /**
     * @generated from protobuf field: int64 chat_id = 50;
     */
    chatId: bigint;
}
/**
 * @generated from protobuf message UpdateReaction
 */
export interface UpdateReaction {
    /**
     * @generated from protobuf field: Reaction reaction = 1;
     */
    reaction?: Reaction;
}
/**
 * @generated from protobuf message UpdateDeleteReaction
 */
export interface UpdateDeleteReaction {
    /**
     * @generated from protobuf field: string emoji = 1;
     */
    emoji: string;
    /**
     * @generated from protobuf field: int64 chat_id = 2;
     */
    chatId: bigint;
    /**
     * @generated from protobuf field: int64 message_id = 3;
     */
    messageId: bigint;
    /**
     * @generated from protobuf field: int64 user_id = 4;
     */
    userId: bigint;
}
/**
 * @generated from protobuf message UpdateUserStatus
 */
export interface UpdateUserStatus {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: UserStatus status = 2;
     */
    status?: UserStatus;
}
/**
 * @generated from protobuf message ChatParticipant
 */
export interface ChatParticipant {
    /**
     * @generated from protobuf field: int64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: int64 date = 2;
     */
    date: bigint;
}
/**
 * @generated from protobuf message UpdateChatParticipantAdd
 */
export interface UpdateChatParticipantAdd {
    /**
     * @generated from protobuf field: int64 chat_id = 1;
     */
    chatId: bigint;
    /**
     * @generated from protobuf field: ChatParticipant participant = 2;
     */
    participant?: ChatParticipant;
}
/**
 * @generated from protobuf message UpdateChatParticipantDelete
 */
export interface UpdateChatParticipantDelete {
    /**
     * @generated from protobuf field: int64 chat_id = 1;
     */
    chatId: bigint;
    /**
     * @generated from protobuf field: int64 user_id = 2;
     */
    userId: bigint;
}
/**
 * @generated from protobuf message UserStatus
 */
export interface UserStatus {
    /**
     * @generated from protobuf field: UserStatus.Status online = 1;
     */
    online: UserStatus_Status;
    /**
     * @generated from protobuf field: LastOnline last_online = 2;
     */
    lastOnline?: LastOnline;
}
/**
 * @generated from protobuf enum UserStatus.Status
 */
export enum UserStatus_Status {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: ONLINE = 1;
     */
    ONLINE = 1,
    /**
     * @generated from protobuf enum value: OFFLINE = 2;
     */
    OFFLINE = 2
}
/**
 * @generated from protobuf message LastOnline
 */
export interface LastOnline {
    /**
     * Date of the last online if exact last online is permitted by the user
     *
     * @generated from protobuf field: optional int64 date = 1;
     */
    date?: bigint;
}
/**
 * @generated from protobuf message DeleteChatInput
 */
export interface DeleteChatInput {
    /**
     * @generated from protobuf field: InputPeer peer_id = 1;
     */
    peerId?: InputPeer;
}
/**
 * @generated from protobuf message DeleteChatResult
 */
export interface DeleteChatResult {
}
/**
 * @generated from protobuf message InviteToSpaceInput
 */
export interface InviteToSpaceInput {
    /**
     * ID of the space to invite to
     *
     * @generated from protobuf field: int64 space_id = 1;
     */
    spaceId: bigint;
    /**
     * Role of the user to invite
     *
     * @generated from protobuf field: Member.Role role = 2;
     */
    role: Member_Role;
    /**
     * @generated from protobuf oneof: via
     */
    via: {
        oneofKind: "userId";
        /**
         * ID of the user to invite
         *
         * @generated from protobuf field: int64 user_id = 3;
         */
        userId: bigint;
    } | {
        oneofKind: "email";
        /**
         * Email of the user to invite
         *
         * @generated from protobuf field: string email = 4;
         */
        email: string;
    } | {
        oneofKind: "phoneNumber";
        /**
         * Phone number of the user to invite
         *
         * @generated from protobuf field: string phone_number = 5;
         */
        phoneNumber: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message InviteToSpaceResult
 */
export interface InviteToSpaceResult {
    /**
     * @generated from protobuf field: User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: Member member = 2;
     */
    member?: Member;
    /**
     * @generated from protobuf field: Chat chat = 3;
     */
    chat?: Chat;
    /**
     * @generated from protobuf field: Dialog dialog = 4;
     */
    dialog?: Dialog;
}
/**
 * @generated from protobuf message GetChatParticipantsInput
 */
export interface GetChatParticipantsInput {
    /**
     * @generated from protobuf field: int64 chat_id = 1;
     */
    chatId: bigint;
}
/**
 * @generated from protobuf message GetChatParticipantsResult
 */
export interface GetChatParticipantsResult {
    /**
     * @generated from protobuf field: repeated ChatParticipant participants = 1;
     */
    participants: ChatParticipant[];
}
/**
 * @generated from protobuf message AddChatParticipantInput
 */
export interface AddChatParticipantInput {
    /**
     * @generated from protobuf field: int64 chat_id = 1;
     */
    chatId: bigint;
    /**
     * @generated from protobuf field: int64 user_id = 2;
     */
    userId: bigint;
}
/**
 * @generated from protobuf message AddChatParticipantResult
 */
export interface AddChatParticipantResult {
    /**
     * @generated from protobuf field: ChatParticipant participant = 1;
     */
    participant?: ChatParticipant;
}
/**
 * @generated from protobuf message RemoveChatParticipantInput
 */
export interface RemoveChatParticipantInput {
    /**
     * @generated from protobuf field: int64 chat_id = 1;
     */
    chatId: bigint;
    /**
     * @generated from protobuf field: int64 user_id = 2;
     */
    userId: bigint;
}
/**
 * @generated from protobuf message RemoveChatParticipantResult
 */
export interface RemoveChatParticipantResult {
}
/**
 * @generated from protobuf enum Method
 */
export enum Method {
    /**
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: GET_ME = 1;
     */
    GET_ME = 1,
    /**
     * @generated from protobuf enum value: SEND_MESSAGE = 2;
     */
    SEND_MESSAGE = 2,
    /**
     * @generated from protobuf enum value: GET_PEER_PHOTO = 3;
     */
    GET_PEER_PHOTO = 3,
    /**
     * @generated from protobuf enum value: DELETE_MESSAGES = 4;
     */
    DELETE_MESSAGES = 4,
    /**
     * @generated from protobuf enum value: GET_CHAT_HISTORY = 5;
     */
    GET_CHAT_HISTORY = 5,
    /**
     * @generated from protobuf enum value: ADD_REACTION = 6;
     */
    ADD_REACTION = 6,
    /**
     * @generated from protobuf enum value: DELETE_REACTION = 7;
     */
    DELETE_REACTION = 7,
    /**
     * @generated from protobuf enum value: EDIT_MESSAGE = 8;
     */
    EDIT_MESSAGE = 8,
    /**
     * @generated from protobuf enum value: CREATE_CHAT = 9;
     */
    CREATE_CHAT = 9,
    /**
     * @generated from protobuf enum value: GET_SPACE_MEMBERS = 10;
     */
    GET_SPACE_MEMBERS = 10,
    /**
     * @generated from protobuf enum value: DELETE_CHAT = 11;
     */
    DELETE_CHAT = 11,
    /**
     * @generated from protobuf enum value: INVITE_TO_SPACE = 12;
     */
    INVITE_TO_SPACE = 12,
    /**
     * @generated from protobuf enum value: GET_CHAT_PARTICIPANTS = 13;
     */
    GET_CHAT_PARTICIPANTS = 13,
    /**
     * @generated from protobuf enum value: ADD_CHAT_PARTICIPANT = 14;
     */
    ADD_CHAT_PARTICIPANT = 14,
    /**
     * @generated from protobuf enum value: REMOVE_CHAT_PARTICIPANT = 15;
     */
    REMOVE_CHAT_PARTICIPANT = 15,
    /**
     * @generated from protobuf enum value: TRANSLATE_MESSAGES = 16;
     */
    TRANSLATE_MESSAGES = 16,
    /**
     * @generated from protobuf enum value: GET_CHATS = 17;
     */
    GET_CHATS = 17
}
// @generated message type with reflection information, may provide speed optimized methods
class ClientMessage$Type extends MessageType<ClientMessage> {
    constructor() {
        super("ClientMessage", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "seq", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "connection_init", kind: "message", oneof: "body", T: () => ConnectionInit },
            { no: 5, name: "rpc_call", kind: "message", oneof: "body", T: () => RpcCall },
            { no: 6, name: "ack", kind: "message", oneof: "body", T: () => Ack },
            { no: 7, name: "ping", kind: "message", oneof: "body", T: () => Ping }
        ]);
    }
    create(value?: PartialMessage<ClientMessage>): ClientMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.seq = 0;
        message.body = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ClientMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientMessage): ClientMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* uint32 seq */ 2:
                    message.seq = reader.uint32();
                    break;
                case /* ConnectionInit connection_init */ 4:
                    message.body = {
                        oneofKind: "connectionInit",
                        connectionInit: ConnectionInit.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).connectionInit)
                    };
                    break;
                case /* RpcCall rpc_call */ 5:
                    message.body = {
                        oneofKind: "rpcCall",
                        rpcCall: RpcCall.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).rpcCall)
                    };
                    break;
                case /* Ack ack */ 6:
                    message.body = {
                        oneofKind: "ack",
                        ack: Ack.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).ack)
                    };
                    break;
                case /* Ping ping */ 7:
                    message.body = {
                        oneofKind: "ping",
                        ping: Ping.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).ping)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* uint32 seq = 2; */
        if (message.seq !== 0)
            writer.tag(2, WireType.Varint).uint32(message.seq);
        /* ConnectionInit connection_init = 4; */
        if (message.body.oneofKind === "connectionInit")
            ConnectionInit.internalBinaryWrite(message.body.connectionInit, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* RpcCall rpc_call = 5; */
        if (message.body.oneofKind === "rpcCall")
            RpcCall.internalBinaryWrite(message.body.rpcCall, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* Ack ack = 6; */
        if (message.body.oneofKind === "ack")
            Ack.internalBinaryWrite(message.body.ack, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* Ping ping = 7; */
        if (message.body.oneofKind === "ping")
            Ping.internalBinaryWrite(message.body.ping, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ClientMessage
 */
export const ClientMessage = new ClientMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectionInit$Type extends MessageType<ConnectionInit> {
    constructor() {
        super("ConnectionInit", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConnectionInit>): ConnectionInit {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<ConnectionInit>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectionInit): ConnectionInit {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectionInit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ConnectionInit
 */
export const ConnectionInit = new ConnectionInit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerProtocolMessage$Type extends MessageType<ServerProtocolMessage> {
    constructor() {
        super("ServerProtocolMessage", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "connection_open", kind: "message", oneof: "body", T: () => ConnectionOpen },
            { no: 5, name: "rpc_result", kind: "message", oneof: "body", T: () => RpcResult },
            { no: 6, name: "rpc_error", kind: "message", oneof: "body", T: () => RpcError },
            { no: 7, name: "message", kind: "message", oneof: "body", T: () => ServerMessage },
            { no: 8, name: "ack", kind: "message", oneof: "body", T: () => Ack },
            { no: 9, name: "pong", kind: "message", oneof: "body", T: () => Pong }
        ]);
    }
    create(value?: PartialMessage<ServerProtocolMessage>): ServerProtocolMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.body = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ServerProtocolMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerProtocolMessage): ServerProtocolMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* ConnectionOpen connection_open */ 4:
                    message.body = {
                        oneofKind: "connectionOpen",
                        connectionOpen: ConnectionOpen.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).connectionOpen)
                    };
                    break;
                case /* RpcResult rpc_result */ 5:
                    message.body = {
                        oneofKind: "rpcResult",
                        rpcResult: RpcResult.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).rpcResult)
                    };
                    break;
                case /* RpcError rpc_error */ 6:
                    message.body = {
                        oneofKind: "rpcError",
                        rpcError: RpcError.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).rpcError)
                    };
                    break;
                case /* ServerMessage message */ 7:
                    message.body = {
                        oneofKind: "message",
                        message: ServerMessage.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).message)
                    };
                    break;
                case /* Ack ack */ 8:
                    message.body = {
                        oneofKind: "ack",
                        ack: Ack.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).ack)
                    };
                    break;
                case /* Pong pong */ 9:
                    message.body = {
                        oneofKind: "pong",
                        pong: Pong.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).pong)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerProtocolMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* ConnectionOpen connection_open = 4; */
        if (message.body.oneofKind === "connectionOpen")
            ConnectionOpen.internalBinaryWrite(message.body.connectionOpen, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* RpcResult rpc_result = 5; */
        if (message.body.oneofKind === "rpcResult")
            RpcResult.internalBinaryWrite(message.body.rpcResult, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* RpcError rpc_error = 6; */
        if (message.body.oneofKind === "rpcError")
            RpcError.internalBinaryWrite(message.body.rpcError, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* ServerMessage message = 7; */
        if (message.body.oneofKind === "message")
            ServerMessage.internalBinaryWrite(message.body.message, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* Ack ack = 8; */
        if (message.body.oneofKind === "ack")
            Ack.internalBinaryWrite(message.body.ack, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* Pong pong = 9; */
        if (message.body.oneofKind === "pong")
            Pong.internalBinaryWrite(message.body.pong, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServerProtocolMessage
 */
export const ServerProtocolMessage = new ServerProtocolMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerMessage$Type extends MessageType<ServerMessage> {
    constructor() {
        super("ServerMessage", [
            { no: 4, name: "update", kind: "message", oneof: "payload", T: () => UpdatesPayload }
        ]);
    }
    create(value?: PartialMessage<ServerMessage>): ServerMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payload = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ServerMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerMessage): ServerMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* UpdatesPayload update */ 4:
                    message.payload = {
                        oneofKind: "update",
                        update: UpdatesPayload.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).update)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* UpdatesPayload update = 4; */
        if (message.payload.oneofKind === "update")
            UpdatesPayload.internalBinaryWrite(message.payload.update, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServerMessage
 */
export const ServerMessage = new ServerMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatesPayload$Type extends MessageType<UpdatesPayload> {
    constructor() {
        super("UpdatesPayload", [
            { no: 1, name: "updates", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Update }
        ]);
    }
    create(value?: PartialMessage<UpdatesPayload>): UpdatesPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.updates = [];
        if (value !== undefined)
            reflectionMergePartial<UpdatesPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatesPayload): UpdatesPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Update updates */ 1:
                    message.updates.push(Update.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatesPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Update updates = 1; */
        for (let i = 0; i < message.updates.length; i++)
            Update.internalBinaryWrite(message.updates[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdatesPayload
 */
export const UpdatesPayload = new UpdatesPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Ack$Type extends MessageType<Ack> {
    constructor() {
        super("Ack", [
            { no: 1, name: "msg_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Ack>): Ack {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.msgId = 0n;
        if (value !== undefined)
            reflectionMergePartial<Ack>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Ack): Ack {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 msg_id */ 1:
                    message.msgId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Ack, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 msg_id = 1; */
        if (message.msgId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.msgId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ack
 */
export const Ack = new Ack$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectionOpen$Type extends MessageType<ConnectionOpen> {
    constructor() {
        super("ConnectionOpen", []);
    }
    create(value?: PartialMessage<ConnectionOpen>): ConnectionOpen {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ConnectionOpen>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectionOpen): ConnectionOpen {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ConnectionOpen, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ConnectionOpen
 */
export const ConnectionOpen = new ConnectionOpen$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Ping$Type extends MessageType<Ping> {
    constructor() {
        super("Ping", [
            { no: 1, name: "nonce", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Ping>): Ping {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nonce = 0n;
        if (value !== undefined)
            reflectionMergePartial<Ping>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Ping): Ping {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 nonce */ 1:
                    message.nonce = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Ping, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 nonce = 1; */
        if (message.nonce !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.nonce);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ping
 */
export const Ping = new Ping$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Pong$Type extends MessageType<Pong> {
    constructor() {
        super("Pong", [
            { no: 1, name: "nonce", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Pong>): Pong {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nonce = 0n;
        if (value !== undefined)
            reflectionMergePartial<Pong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Pong): Pong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 nonce */ 1:
                    message.nonce = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Pong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 nonce = 1; */
        if (message.nonce !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.nonce);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Pong
 */
export const Pong = new Pong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InputPeer$Type extends MessageType<InputPeer> {
    constructor() {
        super("InputPeer", [
            { no: 2, name: "self", kind: "message", oneof: "type", T: () => InputPeerSelf },
            { no: 3, name: "chat", kind: "message", oneof: "type", T: () => InputPeerChat },
            { no: 4, name: "user", kind: "message", oneof: "type", T: () => InputPeerUser }
        ]);
    }
    create(value?: PartialMessage<InputPeer>): InputPeer {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<InputPeer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InputPeer): InputPeer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* InputPeerSelf self */ 2:
                    message.type = {
                        oneofKind: "self",
                        self: InputPeerSelf.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).self)
                    };
                    break;
                case /* InputPeerChat chat */ 3:
                    message.type = {
                        oneofKind: "chat",
                        chat: InputPeerChat.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).chat)
                    };
                    break;
                case /* InputPeerUser user */ 4:
                    message.type = {
                        oneofKind: "user",
                        user: InputPeerUser.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).user)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InputPeer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* InputPeerSelf self = 2; */
        if (message.type.oneofKind === "self")
            InputPeerSelf.internalBinaryWrite(message.type.self, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* InputPeerChat chat = 3; */
        if (message.type.oneofKind === "chat")
            InputPeerChat.internalBinaryWrite(message.type.chat, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* InputPeerUser user = 4; */
        if (message.type.oneofKind === "user")
            InputPeerUser.internalBinaryWrite(message.type.user, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InputPeer
 */
export const InputPeer = new InputPeer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InputPeerSelf$Type extends MessageType<InputPeerSelf> {
    constructor() {
        super("InputPeerSelf", []);
    }
    create(value?: PartialMessage<InputPeerSelf>): InputPeerSelf {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<InputPeerSelf>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InputPeerSelf): InputPeerSelf {
        return target ?? this.create();
    }
    internalBinaryWrite(message: InputPeerSelf, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InputPeerSelf
 */
export const InputPeerSelf = new InputPeerSelf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InputPeerChat$Type extends MessageType<InputPeerChat> {
    constructor() {
        super("InputPeerChat", [
            { no: 1, name: "chat_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<InputPeerChat>): InputPeerChat {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = 0n;
        if (value !== undefined)
            reflectionMergePartial<InputPeerChat>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InputPeerChat): InputPeerChat {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 chat_id */ 1:
                    message.chatId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InputPeerChat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 chat_id = 1; */
        if (message.chatId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.chatId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InputPeerChat
 */
export const InputPeerChat = new InputPeerChat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InputPeerUser$Type extends MessageType<InputPeerUser> {
    constructor() {
        super("InputPeerUser", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<InputPeerUser>): InputPeerUser {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0n;
        if (value !== undefined)
            reflectionMergePartial<InputPeerUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InputPeerUser): InputPeerUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InputPeerUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InputPeerUser
 */
export const InputPeerUser = new InputPeerUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Peer$Type extends MessageType<Peer> {
    constructor() {
        super("Peer", [
            { no: 2, name: "chat", kind: "message", oneof: "type", T: () => PeerChat },
            { no: 3, name: "user", kind: "message", oneof: "type", T: () => PeerUser }
        ]);
    }
    create(value?: PartialMessage<Peer>): Peer {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Peer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Peer): Peer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PeerChat chat */ 2:
                    message.type = {
                        oneofKind: "chat",
                        chat: PeerChat.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).chat)
                    };
                    break;
                case /* PeerUser user */ 3:
                    message.type = {
                        oneofKind: "user",
                        user: PeerUser.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).user)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Peer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PeerChat chat = 2; */
        if (message.type.oneofKind === "chat")
            PeerChat.internalBinaryWrite(message.type.chat, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* PeerUser user = 3; */
        if (message.type.oneofKind === "user")
            PeerUser.internalBinaryWrite(message.type.user, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Peer
 */
export const Peer = new Peer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeerChat$Type extends MessageType<PeerChat> {
    constructor() {
        super("PeerChat", [
            { no: 1, name: "chat_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PeerChat>): PeerChat {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = 0n;
        if (value !== undefined)
            reflectionMergePartial<PeerChat>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PeerChat): PeerChat {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 chat_id */ 1:
                    message.chatId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PeerChat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 chat_id = 1; */
        if (message.chatId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.chatId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PeerChat
 */
export const PeerChat = new PeerChat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeerUser$Type extends MessageType<PeerUser> {
    constructor() {
        super("PeerUser", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PeerUser>): PeerUser {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0n;
        if (value !== undefined)
            reflectionMergePartial<PeerUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PeerUser): PeerUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PeerUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PeerUser
 */
export const PeerUser = new PeerUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User$Type extends MessageType<User> {
    constructor() {
        super("User", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "first_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "last_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "username", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "phone_number", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "email", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "min", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "status", kind: "message", T: () => UserStatus },
            { no: 9, name: "profile_photo", kind: "message", T: () => UserProfilePhoto },
            { no: 11, name: "pending_setup", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "time_zone", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<User>): User {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User): User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* optional string first_name */ 2:
                    message.firstName = reader.string();
                    break;
                case /* optional string last_name */ 3:
                    message.lastName = reader.string();
                    break;
                case /* optional string username */ 4:
                    message.username = reader.string();
                    break;
                case /* optional string phone_number */ 5:
                    message.phoneNumber = reader.string();
                    break;
                case /* optional string email */ 6:
                    message.email = reader.string();
                    break;
                case /* optional bool min */ 7:
                    message.min = reader.bool();
                    break;
                case /* optional UserStatus status */ 8:
                    message.status = UserStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional UserProfilePhoto profile_photo */ 9:
                    message.profilePhoto = UserProfilePhoto.internalBinaryRead(reader, reader.uint32(), options, message.profilePhoto);
                    break;
                case /* optional bool pending_setup */ 11:
                    message.pendingSetup = reader.bool();
                    break;
                case /* optional string time_zone */ 12:
                    message.timeZone = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* optional string first_name = 2; */
        if (message.firstName !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.firstName);
        /* optional string last_name = 3; */
        if (message.lastName !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.lastName);
        /* optional string username = 4; */
        if (message.username !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.username);
        /* optional string phone_number = 5; */
        if (message.phoneNumber !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.phoneNumber);
        /* optional string email = 6; */
        if (message.email !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.email);
        /* optional bool min = 7; */
        if (message.min !== undefined)
            writer.tag(7, WireType.Varint).bool(message.min);
        /* optional UserStatus status = 8; */
        if (message.status)
            UserStatus.internalBinaryWrite(message.status, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional UserProfilePhoto profile_photo = 9; */
        if (message.profilePhoto)
            UserProfilePhoto.internalBinaryWrite(message.profilePhoto, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional bool pending_setup = 11; */
        if (message.pendingSetup !== undefined)
            writer.tag(11, WireType.Varint).bool(message.pendingSetup);
        /* optional string time_zone = 12; */
        if (message.timeZone !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.timeZone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message User
 */
export const User = new User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserProfilePhoto$Type extends MessageType<UserProfilePhoto> {
    constructor() {
        super("UserProfilePhoto", [
            { no: 1, name: "photo_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "stripped_thumb", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<UserProfilePhoto>): UserProfilePhoto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.photoId = 0n;
        message.strippedThumb = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<UserProfilePhoto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserProfilePhoto): UserProfilePhoto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 photo_id */ 1:
                    message.photoId = reader.int64().toBigInt();
                    break;
                case /* bytes stripped_thumb */ 2:
                    message.strippedThumb = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserProfilePhoto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 photo_id = 1; */
        if (message.photoId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.photoId);
        /* bytes stripped_thumb = 2; */
        if (message.strippedThumb.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.strippedThumb);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UserProfilePhoto
 */
export const UserProfilePhoto = new UserProfilePhoto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Dialog$Type extends MessageType<Dialog> {
    constructor() {
        super("Dialog", [
            { no: 1, name: "peer", kind: "message", T: () => Peer },
            { no: 2, name: "space_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "archived", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "pinned", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "read_max_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "unread_count", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "chat_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Dialog>): Dialog {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Dialog>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Dialog): Dialog {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Peer peer */ 1:
                    message.peer = Peer.internalBinaryRead(reader, reader.uint32(), options, message.peer);
                    break;
                case /* optional int64 space_id */ 2:
                    message.spaceId = reader.int64().toBigInt();
                    break;
                case /* optional bool archived */ 3:
                    message.archived = reader.bool();
                    break;
                case /* optional bool pinned */ 4:
                    message.pinned = reader.bool();
                    break;
                case /* optional int64 read_max_id */ 5:
                    message.readMaxId = reader.int64().toBigInt();
                    break;
                case /* optional int32 unread_count */ 6:
                    message.unreadCount = reader.int32();
                    break;
                case /* optional int64 chat_id */ 7:
                    message.chatId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Dialog, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Peer peer = 1; */
        if (message.peer)
            Peer.internalBinaryWrite(message.peer, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional int64 space_id = 2; */
        if (message.spaceId !== undefined)
            writer.tag(2, WireType.Varint).int64(message.spaceId);
        /* optional bool archived = 3; */
        if (message.archived !== undefined)
            writer.tag(3, WireType.Varint).bool(message.archived);
        /* optional bool pinned = 4; */
        if (message.pinned !== undefined)
            writer.tag(4, WireType.Varint).bool(message.pinned);
        /* optional int64 read_max_id = 5; */
        if (message.readMaxId !== undefined)
            writer.tag(5, WireType.Varint).int64(message.readMaxId);
        /* optional int32 unread_count = 6; */
        if (message.unreadCount !== undefined)
            writer.tag(6, WireType.Varint).int32(message.unreadCount);
        /* optional int64 chat_id = 7; */
        if (message.chatId !== undefined)
            writer.tag(7, WireType.Varint).int64(message.chatId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Dialog
 */
export const Dialog = new Dialog$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Chat$Type extends MessageType<Chat> {
    constructor() {
        super("Chat", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "space_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "emoji", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "is_public", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "last_msg_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "peer_id", kind: "message", T: () => Peer },
            { no: 9, name: "date", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Chat>): Chat {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial<Chat>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Chat): Chat {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* optional int64 space_id */ 3:
                    message.spaceId = reader.int64().toBigInt();
                    break;
                case /* optional string description */ 4:
                    message.description = reader.string();
                    break;
                case /* optional string emoji */ 5:
                    message.emoji = reader.string();
                    break;
                case /* optional bool is_public */ 6:
                    message.isPublic = reader.bool();
                    break;
                case /* optional int64 last_msg_id */ 7:
                    message.lastMsgId = reader.int64().toBigInt();
                    break;
                case /* Peer peer_id */ 8:
                    message.peerId = Peer.internalBinaryRead(reader, reader.uint32(), options, message.peerId);
                    break;
                case /* optional int64 date */ 9:
                    message.date = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Chat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* optional int64 space_id = 3; */
        if (message.spaceId !== undefined)
            writer.tag(3, WireType.Varint).int64(message.spaceId);
        /* optional string description = 4; */
        if (message.description !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* optional string emoji = 5; */
        if (message.emoji !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.emoji);
        /* optional bool is_public = 6; */
        if (message.isPublic !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isPublic);
        /* optional int64 last_msg_id = 7; */
        if (message.lastMsgId !== undefined)
            writer.tag(7, WireType.Varint).int64(message.lastMsgId);
        /* Peer peer_id = 8; */
        if (message.peerId)
            Peer.internalBinaryWrite(message.peerId, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional int64 date = 9; */
        if (message.date !== undefined)
            writer.tag(9, WireType.Varint).int64(message.date);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Chat
 */
export const Chat = new Chat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Message$Type extends MessageType<Message> {
    constructor() {
        super("Message", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "from_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "peer_id", kind: "message", T: () => Peer },
            { no: 4, name: "chat_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "out", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "date", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "mentioned", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "reply_to_msg_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "media", kind: "message", T: () => MessageMedia },
            { no: 11, name: "edit_date", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "grouped_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "attachments", kind: "message", T: () => MessageAttachments },
            { no: 14, name: "reactions", kind: "message", T: () => MessageReactions },
            { no: 15, name: "is_sticker", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Message>): Message {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.fromId = 0n;
        message.chatId = 0n;
        message.out = false;
        message.date = 0n;
        if (value !== undefined)
            reflectionMergePartial<Message>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Message): Message {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 from_id */ 2:
                    message.fromId = reader.int64().toBigInt();
                    break;
                case /* Peer peer_id */ 3:
                    message.peerId = Peer.internalBinaryRead(reader, reader.uint32(), options, message.peerId);
                    break;
                case /* int64 chat_id */ 4:
                    message.chatId = reader.int64().toBigInt();
                    break;
                case /* optional string message */ 5:
                    message.message = reader.string();
                    break;
                case /* bool out */ 6:
                    message.out = reader.bool();
                    break;
                case /* int64 date */ 7:
                    message.date = reader.int64().toBigInt();
                    break;
                case /* optional bool mentioned */ 8:
                    message.mentioned = reader.bool();
                    break;
                case /* optional int64 reply_to_msg_id */ 9:
                    message.replyToMsgId = reader.int64().toBigInt();
                    break;
                case /* optional MessageMedia media */ 10:
                    message.media = MessageMedia.internalBinaryRead(reader, reader.uint32(), options, message.media);
                    break;
                case /* optional int64 edit_date */ 11:
                    message.editDate = reader.int64().toBigInt();
                    break;
                case /* optional int64 grouped_id */ 12:
                    message.groupedId = reader.int64().toBigInt();
                    break;
                case /* optional MessageAttachments attachments */ 13:
                    message.attachments = MessageAttachments.internalBinaryRead(reader, reader.uint32(), options, message.attachments);
                    break;
                case /* optional MessageReactions reactions */ 14:
                    message.reactions = MessageReactions.internalBinaryRead(reader, reader.uint32(), options, message.reactions);
                    break;
                case /* optional bool is_sticker */ 15:
                    message.isSticker = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Message, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 from_id = 2; */
        if (message.fromId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.fromId);
        /* Peer peer_id = 3; */
        if (message.peerId)
            Peer.internalBinaryWrite(message.peerId, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 chat_id = 4; */
        if (message.chatId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.chatId);
        /* optional string message = 5; */
        if (message.message !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.message);
        /* bool out = 6; */
        if (message.out !== false)
            writer.tag(6, WireType.Varint).bool(message.out);
        /* int64 date = 7; */
        if (message.date !== 0n)
            writer.tag(7, WireType.Varint).int64(message.date);
        /* optional bool mentioned = 8; */
        if (message.mentioned !== undefined)
            writer.tag(8, WireType.Varint).bool(message.mentioned);
        /* optional int64 reply_to_msg_id = 9; */
        if (message.replyToMsgId !== undefined)
            writer.tag(9, WireType.Varint).int64(message.replyToMsgId);
        /* optional MessageMedia media = 10; */
        if (message.media)
            MessageMedia.internalBinaryWrite(message.media, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional int64 edit_date = 11; */
        if (message.editDate !== undefined)
            writer.tag(11, WireType.Varint).int64(message.editDate);
        /* optional int64 grouped_id = 12; */
        if (message.groupedId !== undefined)
            writer.tag(12, WireType.Varint).int64(message.groupedId);
        /* optional MessageAttachments attachments = 13; */
        if (message.attachments)
            MessageAttachments.internalBinaryWrite(message.attachments, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional MessageReactions reactions = 14; */
        if (message.reactions)
            MessageReactions.internalBinaryWrite(message.reactions, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_sticker = 15; */
        if (message.isSticker !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isSticker);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Message
 */
export const Message = new Message$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageReactions$Type extends MessageType<MessageReactions> {
    constructor() {
        super("MessageReactions", [
            { no: 1, name: "reactions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Reaction }
        ]);
    }
    create(value?: PartialMessage<MessageReactions>): MessageReactions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.reactions = [];
        if (value !== undefined)
            reflectionMergePartial<MessageReactions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageReactions): MessageReactions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Reaction reactions */ 1:
                    message.reactions.push(Reaction.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageReactions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Reaction reactions = 1; */
        for (let i = 0; i < message.reactions.length; i++)
            Reaction.internalBinaryWrite(message.reactions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MessageReactions
 */
export const MessageReactions = new MessageReactions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Reaction$Type extends MessageType<Reaction> {
    constructor() {
        super("Reaction", [
            { no: 1, name: "emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "chat_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "date", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Reaction>): Reaction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.emoji = "";
        message.userId = 0n;
        message.messageId = 0n;
        message.chatId = 0n;
        message.date = 0n;
        if (value !== undefined)
            reflectionMergePartial<Reaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Reaction): Reaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string emoji */ 1:
                    message.emoji = reader.string();
                    break;
                case /* int64 user_id */ 2:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* int64 message_id */ 3:
                    message.messageId = reader.int64().toBigInt();
                    break;
                case /* int64 chat_id */ 4:
                    message.chatId = reader.int64().toBigInt();
                    break;
                case /* int64 date */ 5:
                    message.date = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Reaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string emoji = 1; */
        if (message.emoji !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.emoji);
        /* int64 user_id = 2; */
        if (message.userId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.userId);
        /* int64 message_id = 3; */
        if (message.messageId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.messageId);
        /* int64 chat_id = 4; */
        if (message.chatId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.chatId);
        /* int64 date = 5; */
        if (message.date !== 0n)
            writer.tag(5, WireType.Varint).int64(message.date);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Reaction
 */
export const Reaction = new Reaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Member$Type extends MessageType<Member> {
    constructor() {
        super("Member", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "space_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "role", kind: "enum", opt: true, T: () => ["Member.Role", Member_Role] },
            { no: 5, name: "date", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Member>): Member {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.spaceId = 0n;
        message.userId = 0n;
        message.date = 0n;
        if (value !== undefined)
            reflectionMergePartial<Member>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Member): Member {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 space_id */ 2:
                    message.spaceId = reader.int64().toBigInt();
                    break;
                case /* int64 user_id */ 3:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* optional Member.Role role */ 4:
                    message.role = reader.int32();
                    break;
                case /* int64 date */ 5:
                    message.date = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Member, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 space_id = 2; */
        if (message.spaceId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.spaceId);
        /* int64 user_id = 3; */
        if (message.userId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.userId);
        /* optional Member.Role role = 4; */
        if (message.role !== undefined)
            writer.tag(4, WireType.Varint).int32(message.role);
        /* int64 date = 5; */
        if (message.date !== 0n)
            writer.tag(5, WireType.Varint).int64(message.date);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Member
 */
export const Member = new Member$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Space$Type extends MessageType<Space> {
    constructor() {
        super("Space", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "creator", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "date", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Space>): Space {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.name = "";
        message.creator = false;
        message.date = 0n;
        if (value !== undefined)
            reflectionMergePartial<Space>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Space): Space {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* bool creator */ 3:
                    message.creator = reader.bool();
                    break;
                case /* int64 date */ 4:
                    message.date = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Space, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* bool creator = 3; */
        if (message.creator !== false)
            writer.tag(3, WireType.Varint).bool(message.creator);
        /* int64 date = 4; */
        if (message.date !== 0n)
            writer.tag(4, WireType.Varint).int64(message.date);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Space
 */
export const Space = new Space$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddReactionInput$Type extends MessageType<AddReactionInput> {
    constructor() {
        super("AddReactionInput", [
            { no: 1, name: "emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "peer_id", kind: "message", T: () => InputPeer }
        ]);
    }
    create(value?: PartialMessage<AddReactionInput>): AddReactionInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.emoji = "";
        message.messageId = 0n;
        if (value !== undefined)
            reflectionMergePartial<AddReactionInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddReactionInput): AddReactionInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string emoji */ 1:
                    message.emoji = reader.string();
                    break;
                case /* int64 message_id */ 2:
                    message.messageId = reader.int64().toBigInt();
                    break;
                case /* InputPeer peer_id */ 3:
                    message.peerId = InputPeer.internalBinaryRead(reader, reader.uint32(), options, message.peerId);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddReactionInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string emoji = 1; */
        if (message.emoji !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.emoji);
        /* int64 message_id = 2; */
        if (message.messageId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.messageId);
        /* InputPeer peer_id = 3; */
        if (message.peerId)
            InputPeer.internalBinaryWrite(message.peerId, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AddReactionInput
 */
export const AddReactionInput = new AddReactionInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddReactionResult$Type extends MessageType<AddReactionResult> {
    constructor() {
        super("AddReactionResult", [
            { no: 1, name: "updates", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Update }
        ]);
    }
    create(value?: PartialMessage<AddReactionResult>): AddReactionResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.updates = [];
        if (value !== undefined)
            reflectionMergePartial<AddReactionResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddReactionResult): AddReactionResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Update updates */ 1:
                    message.updates.push(Update.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddReactionResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Update updates = 1; */
        for (let i = 0; i < message.updates.length; i++)
            Update.internalBinaryWrite(message.updates[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AddReactionResult
 */
export const AddReactionResult = new AddReactionResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteReactionInput$Type extends MessageType<DeleteReactionInput> {
    constructor() {
        super("DeleteReactionInput", [
            { no: 1, name: "emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "peer_id", kind: "message", T: () => InputPeer },
            { no: 3, name: "message_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteReactionInput>): DeleteReactionInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.emoji = "";
        message.messageId = 0n;
        if (value !== undefined)
            reflectionMergePartial<DeleteReactionInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteReactionInput): DeleteReactionInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string emoji */ 1:
                    message.emoji = reader.string();
                    break;
                case /* InputPeer peer_id */ 2:
                    message.peerId = InputPeer.internalBinaryRead(reader, reader.uint32(), options, message.peerId);
                    break;
                case /* int64 message_id */ 3:
                    message.messageId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteReactionInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string emoji = 1; */
        if (message.emoji !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.emoji);
        /* InputPeer peer_id = 2; */
        if (message.peerId)
            InputPeer.internalBinaryWrite(message.peerId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 message_id = 3; */
        if (message.messageId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.messageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteReactionInput
 */
export const DeleteReactionInput = new DeleteReactionInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteReactionResult$Type extends MessageType<DeleteReactionResult> {
    constructor() {
        super("DeleteReactionResult", [
            { no: 1, name: "updates", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Update }
        ]);
    }
    create(value?: PartialMessage<DeleteReactionResult>): DeleteReactionResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.updates = [];
        if (value !== undefined)
            reflectionMergePartial<DeleteReactionResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteReactionResult): DeleteReactionResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Update updates */ 1:
                    message.updates.push(Update.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteReactionResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Update updates = 1; */
        for (let i = 0; i < message.updates.length; i++)
            Update.internalBinaryWrite(message.updates[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteReactionResult
 */
export const DeleteReactionResult = new DeleteReactionResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageAttachments$Type extends MessageType<MessageAttachments> {
    constructor() {
        super("MessageAttachments", [
            { no: 1, name: "attachments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MessageAttachment }
        ]);
    }
    create(value?: PartialMessage<MessageAttachments>): MessageAttachments {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.attachments = [];
        if (value !== undefined)
            reflectionMergePartial<MessageAttachments>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageAttachments): MessageAttachments {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated MessageAttachment attachments */ 1:
                    message.attachments.push(MessageAttachment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageAttachments, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated MessageAttachment attachments = 1; */
        for (let i = 0; i < message.attachments.length; i++)
            MessageAttachment.internalBinaryWrite(message.attachments[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MessageAttachments
 */
export const MessageAttachments = new MessageAttachments$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageAttachment$Type extends MessageType<MessageAttachment> {
    constructor() {
        super("MessageAttachment", [
            { no: 4, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "external_task", kind: "message", oneof: "attachment", T: () => MessageAttachmentExternalTask },
            { no: 3, name: "url_preview", kind: "message", oneof: "attachment", T: () => UrlPreview }
        ]);
    }
    create(value?: PartialMessage<MessageAttachment>): MessageAttachment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.attachment = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<MessageAttachment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageAttachment): MessageAttachment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 4:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* MessageAttachmentExternalTask external_task */ 2:
                    message.attachment = {
                        oneofKind: "externalTask",
                        externalTask: MessageAttachmentExternalTask.internalBinaryRead(reader, reader.uint32(), options, (message.attachment as any).externalTask)
                    };
                    break;
                case /* UrlPreview url_preview */ 3:
                    message.attachment = {
                        oneofKind: "urlPreview",
                        urlPreview: UrlPreview.internalBinaryRead(reader, reader.uint32(), options, (message.attachment as any).urlPreview)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageAttachment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 4; */
        if (message.id !== 0n)
            writer.tag(4, WireType.Varint).int64(message.id);
        /* MessageAttachmentExternalTask external_task = 2; */
        if (message.attachment.oneofKind === "externalTask")
            MessageAttachmentExternalTask.internalBinaryWrite(message.attachment.externalTask, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* UrlPreview url_preview = 3; */
        if (message.attachment.oneofKind === "urlPreview")
            UrlPreview.internalBinaryWrite(message.attachment.urlPreview, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MessageAttachment
 */
export const MessageAttachment = new MessageAttachment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UrlPreview$Type extends MessageType<UrlPreview> {
    constructor() {
        super("UrlPreview", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "site_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "title", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "photo", kind: "message", T: () => Photo },
            { no: 7, name: "duration", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UrlPreview>): UrlPreview {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<UrlPreview>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UrlPreview): UrlPreview {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* optional string url */ 2:
                    message.url = reader.string();
                    break;
                case /* optional string site_name */ 3:
                    message.siteName = reader.string();
                    break;
                case /* optional string title */ 4:
                    message.title = reader.string();
                    break;
                case /* optional string description */ 5:
                    message.description = reader.string();
                    break;
                case /* optional Photo photo */ 6:
                    message.photo = Photo.internalBinaryRead(reader, reader.uint32(), options, message.photo);
                    break;
                case /* optional int64 duration */ 7:
                    message.duration = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UrlPreview, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* optional string url = 2; */
        if (message.url !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* optional string site_name = 3; */
        if (message.siteName !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.siteName);
        /* optional string title = 4; */
        if (message.title !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* optional string description = 5; */
        if (message.description !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.description);
        /* optional Photo photo = 6; */
        if (message.photo)
            Photo.internalBinaryWrite(message.photo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional int64 duration = 7; */
        if (message.duration !== undefined)
            writer.tag(7, WireType.Varint).int64(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UrlPreview
 */
export const UrlPreview = new UrlPreview$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageAttachmentExternalTask$Type extends MessageType<MessageAttachmentExternalTask> {
    constructor() {
        super("MessageAttachmentExternalTask", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "application", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "status", kind: "enum", T: () => ["MessageAttachmentExternalTask.Status", MessageAttachmentExternalTask_Status, "STATUS_"] },
            { no: 6, name: "assigned_user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "date", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MessageAttachmentExternalTask>): MessageAttachmentExternalTask {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.taskId = "";
        message.application = "";
        message.title = "";
        message.status = 0;
        message.assignedUserId = 0n;
        message.url = "";
        message.number = "";
        message.date = 0n;
        if (value !== undefined)
            reflectionMergePartial<MessageAttachmentExternalTask>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageAttachmentExternalTask): MessageAttachmentExternalTask {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string task_id */ 2:
                    message.taskId = reader.string();
                    break;
                case /* string application */ 3:
                    message.application = reader.string();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* MessageAttachmentExternalTask.Status status */ 5:
                    message.status = reader.int32();
                    break;
                case /* int64 assigned_user_id */ 6:
                    message.assignedUserId = reader.int64().toBigInt();
                    break;
                case /* string url */ 7:
                    message.url = reader.string();
                    break;
                case /* string number */ 8:
                    message.number = reader.string();
                    break;
                case /* int64 date */ 9:
                    message.date = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageAttachmentExternalTask, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string task_id = 2; */
        if (message.taskId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.taskId);
        /* string application = 3; */
        if (message.application !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.application);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* MessageAttachmentExternalTask.Status status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).int32(message.status);
        /* int64 assigned_user_id = 6; */
        if (message.assignedUserId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.assignedUserId);
        /* string url = 7; */
        if (message.url !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.url);
        /* string number = 8; */
        if (message.number !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.number);
        /* int64 date = 9; */
        if (message.date !== 0n)
            writer.tag(9, WireType.Varint).int64(message.date);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MessageAttachmentExternalTask
 */
export const MessageAttachmentExternalTask = new MessageAttachmentExternalTask$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageMedia$Type extends MessageType<MessageMedia> {
    constructor() {
        super("MessageMedia", [
            { no: 1, name: "photo", kind: "message", oneof: "media", T: () => MessagePhoto },
            { no: 2, name: "video", kind: "message", oneof: "media", T: () => MessageVideo },
            { no: 3, name: "document", kind: "message", oneof: "media", T: () => MessageDocument }
        ]);
    }
    create(value?: PartialMessage<MessageMedia>): MessageMedia {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.media = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<MessageMedia>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageMedia): MessageMedia {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MessagePhoto photo */ 1:
                    message.media = {
                        oneofKind: "photo",
                        photo: MessagePhoto.internalBinaryRead(reader, reader.uint32(), options, (message.media as any).photo)
                    };
                    break;
                case /* MessageVideo video */ 2:
                    message.media = {
                        oneofKind: "video",
                        video: MessageVideo.internalBinaryRead(reader, reader.uint32(), options, (message.media as any).video)
                    };
                    break;
                case /* MessageDocument document */ 3:
                    message.media = {
                        oneofKind: "document",
                        document: MessageDocument.internalBinaryRead(reader, reader.uint32(), options, (message.media as any).document)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageMedia, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MessagePhoto photo = 1; */
        if (message.media.oneofKind === "photo")
            MessagePhoto.internalBinaryWrite(message.media.photo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* MessageVideo video = 2; */
        if (message.media.oneofKind === "video")
            MessageVideo.internalBinaryWrite(message.media.video, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* MessageDocument document = 3; */
        if (message.media.oneofKind === "document")
            MessageDocument.internalBinaryWrite(message.media.document, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MessageMedia
 */
export const MessageMedia = new MessageMedia$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessagePhoto$Type extends MessageType<MessagePhoto> {
    constructor() {
        super("MessagePhoto", [
            { no: 1, name: "photo", kind: "message", T: () => Photo }
        ]);
    }
    create(value?: PartialMessage<MessagePhoto>): MessagePhoto {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MessagePhoto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessagePhoto): MessagePhoto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Photo photo */ 1:
                    message.photo = Photo.internalBinaryRead(reader, reader.uint32(), options, message.photo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessagePhoto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Photo photo = 1; */
        if (message.photo)
            Photo.internalBinaryWrite(message.photo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MessagePhoto
 */
export const MessagePhoto = new MessagePhoto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageVideo$Type extends MessageType<MessageVideo> {
    constructor() {
        super("MessageVideo", [
            { no: 1, name: "video", kind: "message", T: () => Video }
        ]);
    }
    create(value?: PartialMessage<MessageVideo>): MessageVideo {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MessageVideo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageVideo): MessageVideo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Video video */ 1:
                    message.video = Video.internalBinaryRead(reader, reader.uint32(), options, message.video);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageVideo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Video video = 1; */
        if (message.video)
            Video.internalBinaryWrite(message.video, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MessageVideo
 */
export const MessageVideo = new MessageVideo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageDocument$Type extends MessageType<MessageDocument> {
    constructor() {
        super("MessageDocument", [
            { no: 1, name: "document", kind: "message", T: () => Document }
        ]);
    }
    create(value?: PartialMessage<MessageDocument>): MessageDocument {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MessageDocument>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageDocument): MessageDocument {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Document document */ 1:
                    message.document = Document.internalBinaryRead(reader, reader.uint32(), options, message.document);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageDocument, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Document document = 1; */
        if (message.document)
            Document.internalBinaryWrite(message.document, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MessageDocument
 */
export const MessageDocument = new MessageDocument$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Video$Type extends MessageType<Video> {
    constructor() {
        super("Video", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "date", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "w", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "h", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "photo", kind: "message", T: () => Photo },
            { no: 8, name: "cdn_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Video>): Video {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.date = 0n;
        message.w = 0;
        message.h = 0;
        message.duration = 0;
        message.size = 0;
        if (value !== undefined)
            reflectionMergePartial<Video>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Video): Video {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 date */ 2:
                    message.date = reader.int64().toBigInt();
                    break;
                case /* int32 w */ 3:
                    message.w = reader.int32();
                    break;
                case /* int32 h */ 4:
                    message.h = reader.int32();
                    break;
                case /* int32 duration */ 5:
                    message.duration = reader.int32();
                    break;
                case /* int32 size */ 6:
                    message.size = reader.int32();
                    break;
                case /* optional Photo photo */ 7:
                    message.photo = Photo.internalBinaryRead(reader, reader.uint32(), options, message.photo);
                    break;
                case /* optional string cdn_url */ 8:
                    message.cdnUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Video, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 date = 2; */
        if (message.date !== 0n)
            writer.tag(2, WireType.Varint).int64(message.date);
        /* int32 w = 3; */
        if (message.w !== 0)
            writer.tag(3, WireType.Varint).int32(message.w);
        /* int32 h = 4; */
        if (message.h !== 0)
            writer.tag(4, WireType.Varint).int32(message.h);
        /* int32 duration = 5; */
        if (message.duration !== 0)
            writer.tag(5, WireType.Varint).int32(message.duration);
        /* int32 size = 6; */
        if (message.size !== 0)
            writer.tag(6, WireType.Varint).int32(message.size);
        /* optional Photo photo = 7; */
        if (message.photo)
            Photo.internalBinaryWrite(message.photo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional string cdn_url = 8; */
        if (message.cdnUrl !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.cdnUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Video
 */
export const Video = new Video$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Document$Type extends MessageType<Document> {
    constructor() {
        super("Document", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "file_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "mime_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "cdn_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "date", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Document>): Document {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.fileName = "";
        message.mimeType = "";
        message.size = 0;
        message.date = 0n;
        if (value !== undefined)
            reflectionMergePartial<Document>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Document): Document {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string file_name */ 2:
                    message.fileName = reader.string();
                    break;
                case /* string mime_type */ 3:
                    message.mimeType = reader.string();
                    break;
                case /* int32 size */ 4:
                    message.size = reader.int32();
                    break;
                case /* optional string cdn_url */ 5:
                    message.cdnUrl = reader.string();
                    break;
                case /* int64 date */ 6:
                    message.date = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Document, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string file_name = 2; */
        if (message.fileName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fileName);
        /* string mime_type = 3; */
        if (message.mimeType !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.mimeType);
        /* int32 size = 4; */
        if (message.size !== 0)
            writer.tag(4, WireType.Varint).int32(message.size);
        /* optional string cdn_url = 5; */
        if (message.cdnUrl !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.cdnUrl);
        /* int64 date = 6; */
        if (message.date !== 0n)
            writer.tag(6, WireType.Varint).int64(message.date);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Document
 */
export const Document = new Document$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Photo$Type extends MessageType<Photo> {
    constructor() {
        super("Photo", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "date", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "sizes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PhotoSize },
            { no: 4, name: "format", kind: "enum", T: () => ["Photo.Format", Photo_Format, "FORMAT_"] },
            { no: 100, name: "file_unique_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Photo>): Photo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.date = 0n;
        message.sizes = [];
        message.format = 0;
        if (value !== undefined)
            reflectionMergePartial<Photo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Photo): Photo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 date */ 2:
                    message.date = reader.int64().toBigInt();
                    break;
                case /* repeated PhotoSize sizes */ 3:
                    message.sizes.push(PhotoSize.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* Photo.Format format */ 4:
                    message.format = reader.int32();
                    break;
                case /* optional string file_unique_id */ 100:
                    message.fileUniqueId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Photo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 date = 2; */
        if (message.date !== 0n)
            writer.tag(2, WireType.Varint).int64(message.date);
        /* repeated PhotoSize sizes = 3; */
        for (let i = 0; i < message.sizes.length; i++)
            PhotoSize.internalBinaryWrite(message.sizes[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Photo.Format format = 4; */
        if (message.format !== 0)
            writer.tag(4, WireType.Varint).int32(message.format);
        /* optional string file_unique_id = 100; */
        if (message.fileUniqueId !== undefined)
            writer.tag(100, WireType.LengthDelimited).string(message.fileUniqueId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Photo
 */
export const Photo = new Photo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PhotoSize$Type extends MessageType<PhotoSize> {
    constructor() {
        super("PhotoSize", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "w", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "h", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "bytes", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 6, name: "cdn_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PhotoSize>): PhotoSize {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        message.w = 0;
        message.h = 0;
        message.size = 0;
        if (value !== undefined)
            reflectionMergePartial<PhotoSize>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PhotoSize): PhotoSize {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* int32 w */ 2:
                    message.w = reader.int32();
                    break;
                case /* int32 h */ 3:
                    message.h = reader.int32();
                    break;
                case /* int32 size */ 4:
                    message.size = reader.int32();
                    break;
                case /* optional bytes bytes */ 5:
                    message.bytes = reader.bytes();
                    break;
                case /* optional string cdn_url */ 6:
                    message.cdnUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PhotoSize, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* int32 w = 2; */
        if (message.w !== 0)
            writer.tag(2, WireType.Varint).int32(message.w);
        /* int32 h = 3; */
        if (message.h !== 0)
            writer.tag(3, WireType.Varint).int32(message.h);
        /* int32 size = 4; */
        if (message.size !== 0)
            writer.tag(4, WireType.Varint).int32(message.size);
        /* optional bytes bytes = 5; */
        if (message.bytes !== undefined)
            writer.tag(5, WireType.LengthDelimited).bytes(message.bytes);
        /* optional string cdn_url = 6; */
        if (message.cdnUrl !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.cdnUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PhotoSize
 */
export const PhotoSize = new PhotoSize$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RpcError$Type extends MessageType<RpcError> {
    constructor() {
        super("RpcError", [
            { no: 1, name: "req_msg_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "error_code", kind: "enum", T: () => ["RpcError.Code", RpcError_Code] },
            { no: 3, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RpcError>): RpcError {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.reqMsgId = 0n;
        message.errorCode = 0;
        message.message = "";
        message.code = 0;
        if (value !== undefined)
            reflectionMergePartial<RpcError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RpcError): RpcError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 req_msg_id */ 1:
                    message.reqMsgId = reader.uint64().toBigInt();
                    break;
                case /* RpcError.Code error_code */ 2:
                    message.errorCode = reader.int32();
                    break;
                case /* string message */ 3:
                    message.message = reader.string();
                    break;
                case /* int32 code */ 4:
                    message.code = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RpcError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 req_msg_id = 1; */
        if (message.reqMsgId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.reqMsgId);
        /* RpcError.Code error_code = 2; */
        if (message.errorCode !== 0)
            writer.tag(2, WireType.Varint).int32(message.errorCode);
        /* string message = 3; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        /* int32 code = 4; */
        if (message.code !== 0)
            writer.tag(4, WireType.Varint).int32(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RpcError
 */
export const RpcError = new RpcError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RpcCall$Type extends MessageType<RpcCall> {
    constructor() {
        super("RpcCall", [
            { no: 1, name: "method", kind: "enum", T: () => ["Method", Method] },
            { no: 2, name: "getMe", kind: "message", oneof: "input", T: () => GetMeInput },
            { no: 3, name: "getPeerPhoto", kind: "message", oneof: "input", T: () => GetPeerPhotoInput },
            { no: 4, name: "deleteMessages", kind: "message", oneof: "input", T: () => DeleteMessagesInput },
            { no: 5, name: "sendMessage", kind: "message", oneof: "input", T: () => SendMessageInput },
            { no: 6, name: "getChatHistory", kind: "message", oneof: "input", T: () => GetChatHistoryInput },
            { no: 7, name: "addReaction", kind: "message", oneof: "input", T: () => AddReactionInput },
            { no: 8, name: "deleteReaction", kind: "message", oneof: "input", T: () => DeleteReactionInput },
            { no: 9, name: "editMessage", kind: "message", oneof: "input", T: () => EditMessageInput },
            { no: 10, name: "createChat", kind: "message", oneof: "input", T: () => CreateChatInput },
            { no: 11, name: "getSpaceMembers", kind: "message", oneof: "input", T: () => GetSpaceMembersInput },
            { no: 12, name: "deleteChat", kind: "message", oneof: "input", T: () => DeleteChatInput },
            { no: 13, name: "inviteToSpace", kind: "message", oneof: "input", T: () => InviteToSpaceInput },
            { no: 14, name: "getChatParticipants", kind: "message", oneof: "input", T: () => GetChatParticipantsInput },
            { no: 15, name: "addChatParticipant", kind: "message", oneof: "input", T: () => AddChatParticipantInput },
            { no: 16, name: "removeChatParticipant", kind: "message", oneof: "input", T: () => RemoveChatParticipantInput },
            { no: 17, name: "translateMessages", kind: "message", oneof: "input", T: () => TranslateMessagesInput },
            { no: 18, name: "getChats", kind: "message", oneof: "input", T: () => GetChatsInput }
        ]);
    }
    create(value?: PartialMessage<RpcCall>): RpcCall {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.method = 0;
        message.input = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<RpcCall>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RpcCall): RpcCall {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Method method */ 1:
                    message.method = reader.int32();
                    break;
                case /* GetMeInput getMe */ 2:
                    message.input = {
                        oneofKind: "getMe",
                        getMe: GetMeInput.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).getMe)
                    };
                    break;
                case /* GetPeerPhotoInput getPeerPhoto */ 3:
                    message.input = {
                        oneofKind: "getPeerPhoto",
                        getPeerPhoto: GetPeerPhotoInput.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).getPeerPhoto)
                    };
                    break;
                case /* DeleteMessagesInput deleteMessages */ 4:
                    message.input = {
                        oneofKind: "deleteMessages",
                        deleteMessages: DeleteMessagesInput.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).deleteMessages)
                    };
                    break;
                case /* SendMessageInput sendMessage */ 5:
                    message.input = {
                        oneofKind: "sendMessage",
                        sendMessage: SendMessageInput.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).sendMessage)
                    };
                    break;
                case /* GetChatHistoryInput getChatHistory */ 6:
                    message.input = {
                        oneofKind: "getChatHistory",
                        getChatHistory: GetChatHistoryInput.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).getChatHistory)
                    };
                    break;
                case /* AddReactionInput addReaction */ 7:
                    message.input = {
                        oneofKind: "addReaction",
                        addReaction: AddReactionInput.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).addReaction)
                    };
                    break;
                case /* DeleteReactionInput deleteReaction */ 8:
                    message.input = {
                        oneofKind: "deleteReaction",
                        deleteReaction: DeleteReactionInput.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).deleteReaction)
                    };
                    break;
                case /* EditMessageInput editMessage */ 9:
                    message.input = {
                        oneofKind: "editMessage",
                        editMessage: EditMessageInput.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).editMessage)
                    };
                    break;
                case /* CreateChatInput createChat */ 10:
                    message.input = {
                        oneofKind: "createChat",
                        createChat: CreateChatInput.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).createChat)
                    };
                    break;
                case /* GetSpaceMembersInput getSpaceMembers */ 11:
                    message.input = {
                        oneofKind: "getSpaceMembers",
                        getSpaceMembers: GetSpaceMembersInput.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).getSpaceMembers)
                    };
                    break;
                case /* DeleteChatInput deleteChat */ 12:
                    message.input = {
                        oneofKind: "deleteChat",
                        deleteChat: DeleteChatInput.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).deleteChat)
                    };
                    break;
                case /* InviteToSpaceInput inviteToSpace */ 13:
                    message.input = {
                        oneofKind: "inviteToSpace",
                        inviteToSpace: InviteToSpaceInput.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).inviteToSpace)
                    };
                    break;
                case /* GetChatParticipantsInput getChatParticipants */ 14:
                    message.input = {
                        oneofKind: "getChatParticipants",
                        getChatParticipants: GetChatParticipantsInput.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).getChatParticipants)
                    };
                    break;
                case /* AddChatParticipantInput addChatParticipant */ 15:
                    message.input = {
                        oneofKind: "addChatParticipant",
                        addChatParticipant: AddChatParticipantInput.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).addChatParticipant)
                    };
                    break;
                case /* RemoveChatParticipantInput removeChatParticipant */ 16:
                    message.input = {
                        oneofKind: "removeChatParticipant",
                        removeChatParticipant: RemoveChatParticipantInput.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).removeChatParticipant)
                    };
                    break;
                case /* TranslateMessagesInput translateMessages */ 17:
                    message.input = {
                        oneofKind: "translateMessages",
                        translateMessages: TranslateMessagesInput.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).translateMessages)
                    };
                    break;
                case /* GetChatsInput getChats */ 18:
                    message.input = {
                        oneofKind: "getChats",
                        getChats: GetChatsInput.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).getChats)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RpcCall, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Method method = 1; */
        if (message.method !== 0)
            writer.tag(1, WireType.Varint).int32(message.method);
        /* GetMeInput getMe = 2; */
        if (message.input.oneofKind === "getMe")
            GetMeInput.internalBinaryWrite(message.input.getMe, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* GetPeerPhotoInput getPeerPhoto = 3; */
        if (message.input.oneofKind === "getPeerPhoto")
            GetPeerPhotoInput.internalBinaryWrite(message.input.getPeerPhoto, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* DeleteMessagesInput deleteMessages = 4; */
        if (message.input.oneofKind === "deleteMessages")
            DeleteMessagesInput.internalBinaryWrite(message.input.deleteMessages, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* SendMessageInput sendMessage = 5; */
        if (message.input.oneofKind === "sendMessage")
            SendMessageInput.internalBinaryWrite(message.input.sendMessage, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* GetChatHistoryInput getChatHistory = 6; */
        if (message.input.oneofKind === "getChatHistory")
            GetChatHistoryInput.internalBinaryWrite(message.input.getChatHistory, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* AddReactionInput addReaction = 7; */
        if (message.input.oneofKind === "addReaction")
            AddReactionInput.internalBinaryWrite(message.input.addReaction, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* DeleteReactionInput deleteReaction = 8; */
        if (message.input.oneofKind === "deleteReaction")
            DeleteReactionInput.internalBinaryWrite(message.input.deleteReaction, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* EditMessageInput editMessage = 9; */
        if (message.input.oneofKind === "editMessage")
            EditMessageInput.internalBinaryWrite(message.input.editMessage, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* CreateChatInput createChat = 10; */
        if (message.input.oneofKind === "createChat")
            CreateChatInput.internalBinaryWrite(message.input.createChat, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* GetSpaceMembersInput getSpaceMembers = 11; */
        if (message.input.oneofKind === "getSpaceMembers")
            GetSpaceMembersInput.internalBinaryWrite(message.input.getSpaceMembers, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* DeleteChatInput deleteChat = 12; */
        if (message.input.oneofKind === "deleteChat")
            DeleteChatInput.internalBinaryWrite(message.input.deleteChat, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* InviteToSpaceInput inviteToSpace = 13; */
        if (message.input.oneofKind === "inviteToSpace")
            InviteToSpaceInput.internalBinaryWrite(message.input.inviteToSpace, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* GetChatParticipantsInput getChatParticipants = 14; */
        if (message.input.oneofKind === "getChatParticipants")
            GetChatParticipantsInput.internalBinaryWrite(message.input.getChatParticipants, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* AddChatParticipantInput addChatParticipant = 15; */
        if (message.input.oneofKind === "addChatParticipant")
            AddChatParticipantInput.internalBinaryWrite(message.input.addChatParticipant, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* RemoveChatParticipantInput removeChatParticipant = 16; */
        if (message.input.oneofKind === "removeChatParticipant")
            RemoveChatParticipantInput.internalBinaryWrite(message.input.removeChatParticipant, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* TranslateMessagesInput translateMessages = 17; */
        if (message.input.oneofKind === "translateMessages")
            TranslateMessagesInput.internalBinaryWrite(message.input.translateMessages, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* GetChatsInput getChats = 18; */
        if (message.input.oneofKind === "getChats")
            GetChatsInput.internalBinaryWrite(message.input.getChats, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RpcCall
 */
export const RpcCall = new RpcCall$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RpcResult$Type extends MessageType<RpcResult> {
    constructor() {
        super("RpcResult", [
            { no: 1, name: "req_msg_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "getMe", kind: "message", oneof: "result", T: () => GetMeResult },
            { no: 3, name: "getPeerPhoto", kind: "message", oneof: "result", T: () => GetPeerPhotoResult },
            { no: 4, name: "deleteMessages", kind: "message", oneof: "result", T: () => DeleteMessagesResult },
            { no: 5, name: "sendMessage", kind: "message", oneof: "result", T: () => SendMessageResult },
            { no: 6, name: "getChatHistory", kind: "message", oneof: "result", T: () => GetChatHistoryResult },
            { no: 7, name: "addReaction", kind: "message", oneof: "result", T: () => AddReactionResult },
            { no: 8, name: "deleteReaction", kind: "message", oneof: "result", T: () => DeleteReactionResult },
            { no: 9, name: "editMessage", kind: "message", oneof: "result", T: () => EditMessageResult },
            { no: 10, name: "createChat", kind: "message", oneof: "result", T: () => CreateChatResult },
            { no: 11, name: "getSpaceMembers", kind: "message", oneof: "result", T: () => GetSpaceMembersResult },
            { no: 12, name: "deleteChat", kind: "message", oneof: "result", T: () => DeleteChatResult },
            { no: 13, name: "inviteToSpace", kind: "message", oneof: "result", T: () => InviteToSpaceResult },
            { no: 14, name: "getChatParticipants", kind: "message", oneof: "result", T: () => GetChatParticipantsResult },
            { no: 15, name: "addChatParticipant", kind: "message", oneof: "result", T: () => AddChatParticipantResult },
            { no: 16, name: "removeChatParticipant", kind: "message", oneof: "result", T: () => RemoveChatParticipantResult },
            { no: 17, name: "translateMessages", kind: "message", oneof: "result", T: () => TranslateMessagesResult },
            { no: 18, name: "getChats", kind: "message", oneof: "result", T: () => GetChatsResult }
        ]);
    }
    create(value?: PartialMessage<RpcResult>): RpcResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.reqMsgId = 0n;
        message.result = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<RpcResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RpcResult): RpcResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 req_msg_id */ 1:
                    message.reqMsgId = reader.uint64().toBigInt();
                    break;
                case /* GetMeResult getMe */ 2:
                    message.result = {
                        oneofKind: "getMe",
                        getMe: GetMeResult.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).getMe)
                    };
                    break;
                case /* GetPeerPhotoResult getPeerPhoto */ 3:
                    message.result = {
                        oneofKind: "getPeerPhoto",
                        getPeerPhoto: GetPeerPhotoResult.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).getPeerPhoto)
                    };
                    break;
                case /* DeleteMessagesResult deleteMessages */ 4:
                    message.result = {
                        oneofKind: "deleteMessages",
                        deleteMessages: DeleteMessagesResult.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).deleteMessages)
                    };
                    break;
                case /* SendMessageResult sendMessage */ 5:
                    message.result = {
                        oneofKind: "sendMessage",
                        sendMessage: SendMessageResult.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).sendMessage)
                    };
                    break;
                case /* GetChatHistoryResult getChatHistory */ 6:
                    message.result = {
                        oneofKind: "getChatHistory",
                        getChatHistory: GetChatHistoryResult.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).getChatHistory)
                    };
                    break;
                case /* AddReactionResult addReaction */ 7:
                    message.result = {
                        oneofKind: "addReaction",
                        addReaction: AddReactionResult.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).addReaction)
                    };
                    break;
                case /* DeleteReactionResult deleteReaction */ 8:
                    message.result = {
                        oneofKind: "deleteReaction",
                        deleteReaction: DeleteReactionResult.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).deleteReaction)
                    };
                    break;
                case /* EditMessageResult editMessage */ 9:
                    message.result = {
                        oneofKind: "editMessage",
                        editMessage: EditMessageResult.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).editMessage)
                    };
                    break;
                case /* CreateChatResult createChat */ 10:
                    message.result = {
                        oneofKind: "createChat",
                        createChat: CreateChatResult.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).createChat)
                    };
                    break;
                case /* GetSpaceMembersResult getSpaceMembers */ 11:
                    message.result = {
                        oneofKind: "getSpaceMembers",
                        getSpaceMembers: GetSpaceMembersResult.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).getSpaceMembers)
                    };
                    break;
                case /* DeleteChatResult deleteChat */ 12:
                    message.result = {
                        oneofKind: "deleteChat",
                        deleteChat: DeleteChatResult.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).deleteChat)
                    };
                    break;
                case /* InviteToSpaceResult inviteToSpace */ 13:
                    message.result = {
                        oneofKind: "inviteToSpace",
                        inviteToSpace: InviteToSpaceResult.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).inviteToSpace)
                    };
                    break;
                case /* GetChatParticipantsResult getChatParticipants */ 14:
                    message.result = {
                        oneofKind: "getChatParticipants",
                        getChatParticipants: GetChatParticipantsResult.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).getChatParticipants)
                    };
                    break;
                case /* AddChatParticipantResult addChatParticipant */ 15:
                    message.result = {
                        oneofKind: "addChatParticipant",
                        addChatParticipant: AddChatParticipantResult.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).addChatParticipant)
                    };
                    break;
                case /* RemoveChatParticipantResult removeChatParticipant */ 16:
                    message.result = {
                        oneofKind: "removeChatParticipant",
                        removeChatParticipant: RemoveChatParticipantResult.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).removeChatParticipant)
                    };
                    break;
                case /* TranslateMessagesResult translateMessages */ 17:
                    message.result = {
                        oneofKind: "translateMessages",
                        translateMessages: TranslateMessagesResult.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).translateMessages)
                    };
                    break;
                case /* GetChatsResult getChats */ 18:
                    message.result = {
                        oneofKind: "getChats",
                        getChats: GetChatsResult.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).getChats)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RpcResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 req_msg_id = 1; */
        if (message.reqMsgId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.reqMsgId);
        /* GetMeResult getMe = 2; */
        if (message.result.oneofKind === "getMe")
            GetMeResult.internalBinaryWrite(message.result.getMe, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* GetPeerPhotoResult getPeerPhoto = 3; */
        if (message.result.oneofKind === "getPeerPhoto")
            GetPeerPhotoResult.internalBinaryWrite(message.result.getPeerPhoto, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* DeleteMessagesResult deleteMessages = 4; */
        if (message.result.oneofKind === "deleteMessages")
            DeleteMessagesResult.internalBinaryWrite(message.result.deleteMessages, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* SendMessageResult sendMessage = 5; */
        if (message.result.oneofKind === "sendMessage")
            SendMessageResult.internalBinaryWrite(message.result.sendMessage, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* GetChatHistoryResult getChatHistory = 6; */
        if (message.result.oneofKind === "getChatHistory")
            GetChatHistoryResult.internalBinaryWrite(message.result.getChatHistory, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* AddReactionResult addReaction = 7; */
        if (message.result.oneofKind === "addReaction")
            AddReactionResult.internalBinaryWrite(message.result.addReaction, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* DeleteReactionResult deleteReaction = 8; */
        if (message.result.oneofKind === "deleteReaction")
            DeleteReactionResult.internalBinaryWrite(message.result.deleteReaction, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* EditMessageResult editMessage = 9; */
        if (message.result.oneofKind === "editMessage")
            EditMessageResult.internalBinaryWrite(message.result.editMessage, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* CreateChatResult createChat = 10; */
        if (message.result.oneofKind === "createChat")
            CreateChatResult.internalBinaryWrite(message.result.createChat, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* GetSpaceMembersResult getSpaceMembers = 11; */
        if (message.result.oneofKind === "getSpaceMembers")
            GetSpaceMembersResult.internalBinaryWrite(message.result.getSpaceMembers, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* DeleteChatResult deleteChat = 12; */
        if (message.result.oneofKind === "deleteChat")
            DeleteChatResult.internalBinaryWrite(message.result.deleteChat, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* InviteToSpaceResult inviteToSpace = 13; */
        if (message.result.oneofKind === "inviteToSpace")
            InviteToSpaceResult.internalBinaryWrite(message.result.inviteToSpace, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* GetChatParticipantsResult getChatParticipants = 14; */
        if (message.result.oneofKind === "getChatParticipants")
            GetChatParticipantsResult.internalBinaryWrite(message.result.getChatParticipants, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* AddChatParticipantResult addChatParticipant = 15; */
        if (message.result.oneofKind === "addChatParticipant")
            AddChatParticipantResult.internalBinaryWrite(message.result.addChatParticipant, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* RemoveChatParticipantResult removeChatParticipant = 16; */
        if (message.result.oneofKind === "removeChatParticipant")
            RemoveChatParticipantResult.internalBinaryWrite(message.result.removeChatParticipant, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* TranslateMessagesResult translateMessages = 17; */
        if (message.result.oneofKind === "translateMessages")
            TranslateMessagesResult.internalBinaryWrite(message.result.translateMessages, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* GetChatsResult getChats = 18; */
        if (message.result.oneofKind === "getChats")
            GetChatsResult.internalBinaryWrite(message.result.getChats, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RpcResult
 */
export const RpcResult = new RpcResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatsInput$Type extends MessageType<GetChatsInput> {
    constructor() {
        super("GetChatsInput", []);
    }
    create(value?: PartialMessage<GetChatsInput>): GetChatsInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetChatsInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatsInput): GetChatsInput {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetChatsInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetChatsInput
 */
export const GetChatsInput = new GetChatsInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatsResult$Type extends MessageType<GetChatsResult> {
    constructor() {
        super("GetChatsResult", [
            { no: 1, name: "dialogs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Dialog },
            { no: 2, name: "chats", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Chat },
            { no: 3, name: "spaces", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Space },
            { no: 4, name: "users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User },
            { no: 5, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Message }
        ]);
    }
    create(value?: PartialMessage<GetChatsResult>): GetChatsResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dialogs = [];
        message.chats = [];
        message.spaces = [];
        message.users = [];
        message.messages = [];
        if (value !== undefined)
            reflectionMergePartial<GetChatsResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatsResult): GetChatsResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Dialog dialogs */ 1:
                    message.dialogs.push(Dialog.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated Chat chats */ 2:
                    message.chats.push(Chat.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated Space spaces */ 3:
                    message.spaces.push(Space.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated User users */ 4:
                    message.users.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated Message messages */ 5:
                    message.messages.push(Message.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatsResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Dialog dialogs = 1; */
        for (let i = 0; i < message.dialogs.length; i++)
            Dialog.internalBinaryWrite(message.dialogs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated Chat chats = 2; */
        for (let i = 0; i < message.chats.length; i++)
            Chat.internalBinaryWrite(message.chats[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated Space spaces = 3; */
        for (let i = 0; i < message.spaces.length; i++)
            Space.internalBinaryWrite(message.spaces[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated User users = 4; */
        for (let i = 0; i < message.users.length; i++)
            User.internalBinaryWrite(message.users[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated Message messages = 5; */
        for (let i = 0; i < message.messages.length; i++)
            Message.internalBinaryWrite(message.messages[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetChatsResult
 */
export const GetChatsResult = new GetChatsResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TranslateMessagesInput$Type extends MessageType<TranslateMessagesInput> {
    constructor() {
        super("TranslateMessagesInput", [
            { no: 1, name: "peer_id", kind: "message", T: () => InputPeer },
            { no: 2, name: "message_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TranslateMessagesInput>): TranslateMessagesInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messageIds = [];
        message.language = "";
        if (value !== undefined)
            reflectionMergePartial<TranslateMessagesInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TranslateMessagesInput): TranslateMessagesInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* InputPeer peer_id */ 1:
                    message.peerId = InputPeer.internalBinaryRead(reader, reader.uint32(), options, message.peerId);
                    break;
                case /* repeated int64 message_ids */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.messageIds.push(reader.int64().toBigInt());
                    else
                        message.messageIds.push(reader.int64().toBigInt());
                    break;
                case /* string language */ 4:
                    message.language = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TranslateMessagesInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* InputPeer peer_id = 1; */
        if (message.peerId)
            InputPeer.internalBinaryWrite(message.peerId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated int64 message_ids = 2; */
        if (message.messageIds.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.messageIds.length; i++)
                writer.int64(message.messageIds[i]);
            writer.join();
        }
        /* string language = 4; */
        if (message.language !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.language);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TranslateMessagesInput
 */
export const TranslateMessagesInput = new TranslateMessagesInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TranslateMessagesResult$Type extends MessageType<TranslateMessagesResult> {
    constructor() {
        super("TranslateMessagesResult", [
            { no: 1, name: "translations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MessageTranslation }
        ]);
    }
    create(value?: PartialMessage<TranslateMessagesResult>): TranslateMessagesResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.translations = [];
        if (value !== undefined)
            reflectionMergePartial<TranslateMessagesResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TranslateMessagesResult): TranslateMessagesResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated MessageTranslation translations */ 1:
                    message.translations.push(MessageTranslation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TranslateMessagesResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated MessageTranslation translations = 1; */
        for (let i = 0; i < message.translations.length; i++)
            MessageTranslation.internalBinaryWrite(message.translations[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TranslateMessagesResult
 */
export const TranslateMessagesResult = new TranslateMessagesResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageTranslation$Type extends MessageType<MessageTranslation> {
    constructor() {
        super("MessageTranslation", [
            { no: 1, name: "message_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "translation", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "date", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MessageTranslation>): MessageTranslation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messageId = 0n;
        message.language = "";
        message.translation = "";
        message.date = 0n;
        if (value !== undefined)
            reflectionMergePartial<MessageTranslation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageTranslation): MessageTranslation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 message_id */ 1:
                    message.messageId = reader.int64().toBigInt();
                    break;
                case /* string language */ 2:
                    message.language = reader.string();
                    break;
                case /* string translation */ 3:
                    message.translation = reader.string();
                    break;
                case /* int64 date */ 4:
                    message.date = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageTranslation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 message_id = 1; */
        if (message.messageId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.messageId);
        /* string language = 2; */
        if (message.language !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.language);
        /* string translation = 3; */
        if (message.translation !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.translation);
        /* int64 date = 4; */
        if (message.date !== 0n)
            writer.tag(4, WireType.Varint).int64(message.date);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MessageTranslation
 */
export const MessageTranslation = new MessageTranslation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMeInput$Type extends MessageType<GetMeInput> {
    constructor() {
        super("GetMeInput", []);
    }
    create(value?: PartialMessage<GetMeInput>): GetMeInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetMeInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMeInput): GetMeInput {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetMeInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetMeInput
 */
export const GetMeInput = new GetMeInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMeResult$Type extends MessageType<GetMeResult> {
    constructor() {
        super("GetMeResult", [
            { no: 1, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<GetMeResult>): GetMeResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetMeResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMeResult): GetMeResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMeResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetMeResult
 */
export const GetMeResult = new GetMeResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPeerPhotoInput$Type extends MessageType<GetPeerPhotoInput> {
    constructor() {
        super("GetPeerPhotoInput", [
            { no: 1, name: "peer_id", kind: "message", T: () => InputPeer },
            { no: 2, name: "photo_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetPeerPhotoInput>): GetPeerPhotoInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.photoId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetPeerPhotoInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPeerPhotoInput): GetPeerPhotoInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* InputPeer peer_id */ 1:
                    message.peerId = InputPeer.internalBinaryRead(reader, reader.uint32(), options, message.peerId);
                    break;
                case /* int64 photo_id */ 2:
                    message.photoId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPeerPhotoInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* InputPeer peer_id = 1; */
        if (message.peerId)
            InputPeer.internalBinaryWrite(message.peerId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 photo_id = 2; */
        if (message.photoId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.photoId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPeerPhotoInput
 */
export const GetPeerPhotoInput = new GetPeerPhotoInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPeerPhotoResult$Type extends MessageType<GetPeerPhotoResult> {
    constructor() {
        super("GetPeerPhotoResult", [
            { no: 1, name: "photo", kind: "message", T: () => Photo }
        ]);
    }
    create(value?: PartialMessage<GetPeerPhotoResult>): GetPeerPhotoResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetPeerPhotoResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPeerPhotoResult): GetPeerPhotoResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Photo photo */ 1:
                    message.photo = Photo.internalBinaryRead(reader, reader.uint32(), options, message.photo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPeerPhotoResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Photo photo = 1; */
        if (message.photo)
            Photo.internalBinaryWrite(message.photo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPeerPhotoResult
 */
export const GetPeerPhotoResult = new GetPeerPhotoResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteMessagesInput$Type extends MessageType<DeleteMessagesInput> {
    constructor() {
        super("DeleteMessagesInput", [
            { no: 1, name: "message_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "peer_id", kind: "message", T: () => InputPeer }
        ]);
    }
    create(value?: PartialMessage<DeleteMessagesInput>): DeleteMessagesInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messageIds = [];
        if (value !== undefined)
            reflectionMergePartial<DeleteMessagesInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteMessagesInput): DeleteMessagesInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 message_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.messageIds.push(reader.int64().toBigInt());
                    else
                        message.messageIds.push(reader.int64().toBigInt());
                    break;
                case /* InputPeer peer_id */ 2:
                    message.peerId = InputPeer.internalBinaryRead(reader, reader.uint32(), options, message.peerId);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteMessagesInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 message_ids = 1; */
        if (message.messageIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.messageIds.length; i++)
                writer.int64(message.messageIds[i]);
            writer.join();
        }
        /* InputPeer peer_id = 2; */
        if (message.peerId)
            InputPeer.internalBinaryWrite(message.peerId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteMessagesInput
 */
export const DeleteMessagesInput = new DeleteMessagesInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteMessagesResult$Type extends MessageType<DeleteMessagesResult> {
    constructor() {
        super("DeleteMessagesResult", [
            { no: 1, name: "updates", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Update }
        ]);
    }
    create(value?: PartialMessage<DeleteMessagesResult>): DeleteMessagesResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.updates = [];
        if (value !== undefined)
            reflectionMergePartial<DeleteMessagesResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteMessagesResult): DeleteMessagesResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Update updates */ 1:
                    message.updates.push(Update.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteMessagesResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Update updates = 1; */
        for (let i = 0; i < message.updates.length; i++)
            Update.internalBinaryWrite(message.updates[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteMessagesResult
 */
export const DeleteMessagesResult = new DeleteMessagesResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditMessageInput$Type extends MessageType<EditMessageInput> {
    constructor() {
        super("EditMessageInput", [
            { no: 1, name: "message_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "peer_id", kind: "message", T: () => InputPeer },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EditMessageInput>): EditMessageInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messageId = 0n;
        message.text = "";
        if (value !== undefined)
            reflectionMergePartial<EditMessageInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditMessageInput): EditMessageInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 message_id */ 1:
                    message.messageId = reader.int64().toBigInt();
                    break;
                case /* InputPeer peer_id */ 2:
                    message.peerId = InputPeer.internalBinaryRead(reader, reader.uint32(), options, message.peerId);
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditMessageInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 message_id = 1; */
        if (message.messageId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.messageId);
        /* InputPeer peer_id = 2; */
        if (message.peerId)
            InputPeer.internalBinaryWrite(message.peerId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EditMessageInput
 */
export const EditMessageInput = new EditMessageInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditMessageResult$Type extends MessageType<EditMessageResult> {
    constructor() {
        super("EditMessageResult", [
            { no: 1, name: "updates", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Update }
        ]);
    }
    create(value?: PartialMessage<EditMessageResult>): EditMessageResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.updates = [];
        if (value !== undefined)
            reflectionMergePartial<EditMessageResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditMessageResult): EditMessageResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Update updates */ 1:
                    message.updates.push(Update.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditMessageResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Update updates = 1; */
        for (let i = 0; i < message.updates.length; i++)
            Update.internalBinaryWrite(message.updates[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EditMessageResult
 */
export const EditMessageResult = new EditMessageResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InputMedia$Type extends MessageType<InputMedia> {
    constructor() {
        super("InputMedia", [
            { no: 1, name: "photo", kind: "message", oneof: "media", T: () => InputMediaPhoto },
            { no: 2, name: "video", kind: "message", oneof: "media", T: () => InputMediaVideo },
            { no: 3, name: "document", kind: "message", oneof: "media", T: () => InputMediaDocument }
        ]);
    }
    create(value?: PartialMessage<InputMedia>): InputMedia {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.media = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<InputMedia>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InputMedia): InputMedia {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* InputMediaPhoto photo */ 1:
                    message.media = {
                        oneofKind: "photo",
                        photo: InputMediaPhoto.internalBinaryRead(reader, reader.uint32(), options, (message.media as any).photo)
                    };
                    break;
                case /* InputMediaVideo video */ 2:
                    message.media = {
                        oneofKind: "video",
                        video: InputMediaVideo.internalBinaryRead(reader, reader.uint32(), options, (message.media as any).video)
                    };
                    break;
                case /* InputMediaDocument document */ 3:
                    message.media = {
                        oneofKind: "document",
                        document: InputMediaDocument.internalBinaryRead(reader, reader.uint32(), options, (message.media as any).document)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InputMedia, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* InputMediaPhoto photo = 1; */
        if (message.media.oneofKind === "photo")
            InputMediaPhoto.internalBinaryWrite(message.media.photo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* InputMediaVideo video = 2; */
        if (message.media.oneofKind === "video")
            InputMediaVideo.internalBinaryWrite(message.media.video, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* InputMediaDocument document = 3; */
        if (message.media.oneofKind === "document")
            InputMediaDocument.internalBinaryWrite(message.media.document, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InputMedia
 */
export const InputMedia = new InputMedia$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InputMediaPhoto$Type extends MessageType<InputMediaPhoto> {
    constructor() {
        super("InputMediaPhoto", [
            { no: 1, name: "photo_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<InputMediaPhoto>): InputMediaPhoto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.photoId = 0n;
        if (value !== undefined)
            reflectionMergePartial<InputMediaPhoto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InputMediaPhoto): InputMediaPhoto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 photo_id */ 1:
                    message.photoId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InputMediaPhoto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 photo_id = 1; */
        if (message.photoId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.photoId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InputMediaPhoto
 */
export const InputMediaPhoto = new InputMediaPhoto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InputMediaVideo$Type extends MessageType<InputMediaVideo> {
    constructor() {
        super("InputMediaVideo", [
            { no: 1, name: "video_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<InputMediaVideo>): InputMediaVideo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.videoId = 0n;
        if (value !== undefined)
            reflectionMergePartial<InputMediaVideo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InputMediaVideo): InputMediaVideo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 video_id */ 1:
                    message.videoId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InputMediaVideo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 video_id = 1; */
        if (message.videoId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.videoId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InputMediaVideo
 */
export const InputMediaVideo = new InputMediaVideo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InputMediaDocument$Type extends MessageType<InputMediaDocument> {
    constructor() {
        super("InputMediaDocument", [
            { no: 1, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<InputMediaDocument>): InputMediaDocument {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0n;
        if (value !== undefined)
            reflectionMergePartial<InputMediaDocument>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InputMediaDocument): InputMediaDocument {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 document_id */ 1:
                    message.documentId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InputMediaDocument, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 document_id = 1; */
        if (message.documentId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.documentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InputMediaDocument
 */
export const InputMediaDocument = new InputMediaDocument$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendMessageInput$Type extends MessageType<SendMessageInput> {
    constructor() {
        super("SendMessageInput", [
            { no: 1, name: "peer_id", kind: "message", T: () => InputPeer },
            { no: 2, name: "message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reply_to_msg_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "random_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "media", kind: "message", T: () => InputMedia },
            { no: 1000, name: "temporary_send_date", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "is_sticker", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SendMessageInput>): SendMessageInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SendMessageInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendMessageInput): SendMessageInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* InputPeer peer_id */ 1:
                    message.peerId = InputPeer.internalBinaryRead(reader, reader.uint32(), options, message.peerId);
                    break;
                case /* optional string message */ 2:
                    message.message = reader.string();
                    break;
                case /* optional int64 reply_to_msg_id */ 3:
                    message.replyToMsgId = reader.int64().toBigInt();
                    break;
                case /* optional int64 random_id */ 4:
                    message.randomId = reader.int64().toBigInt();
                    break;
                case /* optional InputMedia media */ 5:
                    message.media = InputMedia.internalBinaryRead(reader, reader.uint32(), options, message.media);
                    break;
                case /* optional int64 temporary_send_date */ 1000:
                    message.temporarySendDate = reader.int64().toBigInt();
                    break;
                case /* optional bool is_sticker */ 6:
                    message.isSticker = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendMessageInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* InputPeer peer_id = 1; */
        if (message.peerId)
            InputPeer.internalBinaryWrite(message.peerId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional string message = 2; */
        if (message.message !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* optional int64 reply_to_msg_id = 3; */
        if (message.replyToMsgId !== undefined)
            writer.tag(3, WireType.Varint).int64(message.replyToMsgId);
        /* optional int64 random_id = 4; */
        if (message.randomId !== undefined)
            writer.tag(4, WireType.Varint).int64(message.randomId);
        /* optional InputMedia media = 5; */
        if (message.media)
            InputMedia.internalBinaryWrite(message.media, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional int64 temporary_send_date = 1000; */
        if (message.temporarySendDate !== undefined)
            writer.tag(1000, WireType.Varint).int64(message.temporarySendDate);
        /* optional bool is_sticker = 6; */
        if (message.isSticker !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isSticker);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SendMessageInput
 */
export const SendMessageInput = new SendMessageInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendMessageResult$Type extends MessageType<SendMessageResult> {
    constructor() {
        super("SendMessageResult", [
            { no: 2, name: "updates", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Update }
        ]);
    }
    create(value?: PartialMessage<SendMessageResult>): SendMessageResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.updates = [];
        if (value !== undefined)
            reflectionMergePartial<SendMessageResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendMessageResult): SendMessageResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Update updates */ 2:
                    message.updates.push(Update.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendMessageResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Update updates = 2; */
        for (let i = 0; i < message.updates.length; i++)
            Update.internalBinaryWrite(message.updates[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SendMessageResult
 */
export const SendMessageResult = new SendMessageResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatHistoryInput$Type extends MessageType<GetChatHistoryInput> {
    constructor() {
        super("GetChatHistoryInput", [
            { no: 1, name: "peer_id", kind: "message", T: () => InputPeer },
            { no: 2, name: "offset_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "limit", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetChatHistoryInput>): GetChatHistoryInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetChatHistoryInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatHistoryInput): GetChatHistoryInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* InputPeer peer_id */ 1:
                    message.peerId = InputPeer.internalBinaryRead(reader, reader.uint32(), options, message.peerId);
                    break;
                case /* optional int64 offset_id */ 2:
                    message.offsetId = reader.int64().toBigInt();
                    break;
                case /* optional int32 limit */ 3:
                    message.limit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatHistoryInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* InputPeer peer_id = 1; */
        if (message.peerId)
            InputPeer.internalBinaryWrite(message.peerId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional int64 offset_id = 2; */
        if (message.offsetId !== undefined)
            writer.tag(2, WireType.Varint).int64(message.offsetId);
        /* optional int32 limit = 3; */
        if (message.limit !== undefined)
            writer.tag(3, WireType.Varint).int32(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetChatHistoryInput
 */
export const GetChatHistoryInput = new GetChatHistoryInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatHistoryResult$Type extends MessageType<GetChatHistoryResult> {
    constructor() {
        super("GetChatHistoryResult", [
            { no: 1, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Message }
        ]);
    }
    create(value?: PartialMessage<GetChatHistoryResult>): GetChatHistoryResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messages = [];
        if (value !== undefined)
            reflectionMergePartial<GetChatHistoryResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatHistoryResult): GetChatHistoryResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Message messages */ 1:
                    message.messages.push(Message.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatHistoryResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Message messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            Message.internalBinaryWrite(message.messages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetChatHistoryResult
 */
export const GetChatHistoryResult = new GetChatHistoryResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InputChatParticipant$Type extends MessageType<InputChatParticipant> {
    constructor() {
        super("InputChatParticipant", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<InputChatParticipant>): InputChatParticipant {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0n;
        if (value !== undefined)
            reflectionMergePartial<InputChatParticipant>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InputChatParticipant): InputChatParticipant {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InputChatParticipant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InputChatParticipant
 */
export const InputChatParticipant = new InputChatParticipant$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateChatInput$Type extends MessageType<CreateChatInput> {
    constructor() {
        super("CreateChatInput", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "space_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "emoji", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "is_public", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "participants", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => InputChatParticipant }
        ]);
    }
    create(value?: PartialMessage<CreateChatInput>): CreateChatInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.title = "";
        message.isPublic = false;
        message.participants = [];
        if (value !== undefined)
            reflectionMergePartial<CreateChatInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateChatInput): CreateChatInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* optional int64 space_id */ 2:
                    message.spaceId = reader.int64().toBigInt();
                    break;
                case /* optional string description */ 3:
                    message.description = reader.string();
                    break;
                case /* optional string emoji */ 4:
                    message.emoji = reader.string();
                    break;
                case /* bool is_public */ 5:
                    message.isPublic = reader.bool();
                    break;
                case /* repeated InputChatParticipant participants */ 6:
                    message.participants.push(InputChatParticipant.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateChatInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* optional int64 space_id = 2; */
        if (message.spaceId !== undefined)
            writer.tag(2, WireType.Varint).int64(message.spaceId);
        /* optional string description = 3; */
        if (message.description !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* optional string emoji = 4; */
        if (message.emoji !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.emoji);
        /* bool is_public = 5; */
        if (message.isPublic !== false)
            writer.tag(5, WireType.Varint).bool(message.isPublic);
        /* repeated InputChatParticipant participants = 6; */
        for (let i = 0; i < message.participants.length; i++)
            InputChatParticipant.internalBinaryWrite(message.participants[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateChatInput
 */
export const CreateChatInput = new CreateChatInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateChatResult$Type extends MessageType<CreateChatResult> {
    constructor() {
        super("CreateChatResult", [
            { no: 1, name: "chat", kind: "message", T: () => Chat },
            { no: 2, name: "dialog", kind: "message", T: () => Dialog }
        ]);
    }
    create(value?: PartialMessage<CreateChatResult>): CreateChatResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateChatResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateChatResult): CreateChatResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Chat chat */ 1:
                    message.chat = Chat.internalBinaryRead(reader, reader.uint32(), options, message.chat);
                    break;
                case /* Dialog dialog */ 2:
                    message.dialog = Dialog.internalBinaryRead(reader, reader.uint32(), options, message.dialog);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateChatResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Chat chat = 1; */
        if (message.chat)
            Chat.internalBinaryWrite(message.chat, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Dialog dialog = 2; */
        if (message.dialog)
            Dialog.internalBinaryWrite(message.dialog, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateChatResult
 */
export const CreateChatResult = new CreateChatResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSpaceMembersInput$Type extends MessageType<GetSpaceMembersInput> {
    constructor() {
        super("GetSpaceMembersInput", [
            { no: 1, name: "space_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetSpaceMembersInput>): GetSpaceMembersInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.spaceId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetSpaceMembersInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSpaceMembersInput): GetSpaceMembersInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 space_id */ 1:
                    message.spaceId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSpaceMembersInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 space_id = 1; */
        if (message.spaceId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.spaceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetSpaceMembersInput
 */
export const GetSpaceMembersInput = new GetSpaceMembersInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSpaceMembersResult$Type extends MessageType<GetSpaceMembersResult> {
    constructor() {
        super("GetSpaceMembersResult", [
            { no: 1, name: "members", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Member },
            { no: 2, name: "users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User }
        ]);
    }
    create(value?: PartialMessage<GetSpaceMembersResult>): GetSpaceMembersResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.members = [];
        message.users = [];
        if (value !== undefined)
            reflectionMergePartial<GetSpaceMembersResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSpaceMembersResult): GetSpaceMembersResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Member members */ 1:
                    message.members.push(Member.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated User users */ 2:
                    message.users.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSpaceMembersResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Member members = 1; */
        for (let i = 0; i < message.members.length; i++)
            Member.internalBinaryWrite(message.members[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated User users = 2; */
        for (let i = 0; i < message.users.length; i++)
            User.internalBinaryWrite(message.users[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetSpaceMembersResult
 */
export const GetSpaceMembersResult = new GetSpaceMembersResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Update$Type extends MessageType<Update> {
    constructor() {
        super("Update", [
            { no: 4, name: "new_message", kind: "message", oneof: "update", T: () => UpdateNewMessage },
            { no: 5, name: "edit_message", kind: "message", oneof: "update", T: () => UpdateEditMessage },
            { no: 6, name: "update_message_id", kind: "message", oneof: "update", T: () => UpdateMessageId },
            { no: 7, name: "delete_messages", kind: "message", oneof: "update", T: () => UpdateDeleteMessages },
            { no: 8, name: "update_compose_action", kind: "message", oneof: "update", T: () => UpdateComposeAction },
            { no: 9, name: "update_user_status", kind: "message", oneof: "update", T: () => UpdateUserStatus },
            { no: 10, name: "message_attachment", kind: "message", oneof: "update", T: () => UpdateMessageAttachment },
            { no: 11, name: "update_reaction", kind: "message", oneof: "update", T: () => UpdateReaction },
            { no: 12, name: "delete_reaction", kind: "message", oneof: "update", T: () => UpdateDeleteReaction },
            { no: 13, name: "participant_add", kind: "message", oneof: "update", T: () => UpdateChatParticipantAdd },
            { no: 14, name: "participant_delete", kind: "message", oneof: "update", T: () => UpdateChatParticipantDelete },
            { no: 15, name: "new_chat", kind: "message", oneof: "update", T: () => UpdateNewChat },
            { no: 16, name: "delete_chat", kind: "message", oneof: "update", T: () => UpdateDeleteChat },
            { no: 17, name: "space_member_add", kind: "message", oneof: "update", T: () => UpdateSpaceMemberAdd },
            { no: 18, name: "space_member_delete", kind: "message", oneof: "update", T: () => UpdateSpaceMemberDelete },
            { no: 19, name: "join_space", kind: "message", oneof: "update", T: () => UpdateJoinSpace },
            { no: 20, name: "update_read_max_id", kind: "message", oneof: "update", T: () => UpdateReadMaxId }
        ]);
    }
    create(value?: PartialMessage<Update>): Update {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.update = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Update>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Update): Update {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* UpdateNewMessage new_message */ 4:
                    message.update = {
                        oneofKind: "newMessage",
                        newMessage: UpdateNewMessage.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).newMessage)
                    };
                    break;
                case /* UpdateEditMessage edit_message */ 5:
                    message.update = {
                        oneofKind: "editMessage",
                        editMessage: UpdateEditMessage.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).editMessage)
                    };
                    break;
                case /* UpdateMessageId update_message_id */ 6:
                    message.update = {
                        oneofKind: "updateMessageId",
                        updateMessageId: UpdateMessageId.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).updateMessageId)
                    };
                    break;
                case /* UpdateDeleteMessages delete_messages */ 7:
                    message.update = {
                        oneofKind: "deleteMessages",
                        deleteMessages: UpdateDeleteMessages.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).deleteMessages)
                    };
                    break;
                case /* UpdateComposeAction update_compose_action */ 8:
                    message.update = {
                        oneofKind: "updateComposeAction",
                        updateComposeAction: UpdateComposeAction.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).updateComposeAction)
                    };
                    break;
                case /* UpdateUserStatus update_user_status */ 9:
                    message.update = {
                        oneofKind: "updateUserStatus",
                        updateUserStatus: UpdateUserStatus.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).updateUserStatus)
                    };
                    break;
                case /* UpdateMessageAttachment message_attachment */ 10:
                    message.update = {
                        oneofKind: "messageAttachment",
                        messageAttachment: UpdateMessageAttachment.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).messageAttachment)
                    };
                    break;
                case /* UpdateReaction update_reaction */ 11:
                    message.update = {
                        oneofKind: "updateReaction",
                        updateReaction: UpdateReaction.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).updateReaction)
                    };
                    break;
                case /* UpdateDeleteReaction delete_reaction */ 12:
                    message.update = {
                        oneofKind: "deleteReaction",
                        deleteReaction: UpdateDeleteReaction.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).deleteReaction)
                    };
                    break;
                case /* UpdateChatParticipantAdd participant_add */ 13:
                    message.update = {
                        oneofKind: "participantAdd",
                        participantAdd: UpdateChatParticipantAdd.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).participantAdd)
                    };
                    break;
                case /* UpdateChatParticipantDelete participant_delete */ 14:
                    message.update = {
                        oneofKind: "participantDelete",
                        participantDelete: UpdateChatParticipantDelete.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).participantDelete)
                    };
                    break;
                case /* UpdateNewChat new_chat */ 15:
                    message.update = {
                        oneofKind: "newChat",
                        newChat: UpdateNewChat.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).newChat)
                    };
                    break;
                case /* UpdateDeleteChat delete_chat */ 16:
                    message.update = {
                        oneofKind: "deleteChat",
                        deleteChat: UpdateDeleteChat.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).deleteChat)
                    };
                    break;
                case /* UpdateSpaceMemberAdd space_member_add */ 17:
                    message.update = {
                        oneofKind: "spaceMemberAdd",
                        spaceMemberAdd: UpdateSpaceMemberAdd.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).spaceMemberAdd)
                    };
                    break;
                case /* UpdateSpaceMemberDelete space_member_delete */ 18:
                    message.update = {
                        oneofKind: "spaceMemberDelete",
                        spaceMemberDelete: UpdateSpaceMemberDelete.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).spaceMemberDelete)
                    };
                    break;
                case /* UpdateJoinSpace join_space */ 19:
                    message.update = {
                        oneofKind: "joinSpace",
                        joinSpace: UpdateJoinSpace.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).joinSpace)
                    };
                    break;
                case /* UpdateReadMaxId update_read_max_id */ 20:
                    message.update = {
                        oneofKind: "updateReadMaxId",
                        updateReadMaxId: UpdateReadMaxId.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).updateReadMaxId)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Update, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* UpdateNewMessage new_message = 4; */
        if (message.update.oneofKind === "newMessage")
            UpdateNewMessage.internalBinaryWrite(message.update.newMessage, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* UpdateEditMessage edit_message = 5; */
        if (message.update.oneofKind === "editMessage")
            UpdateEditMessage.internalBinaryWrite(message.update.editMessage, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* UpdateMessageId update_message_id = 6; */
        if (message.update.oneofKind === "updateMessageId")
            UpdateMessageId.internalBinaryWrite(message.update.updateMessageId, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* UpdateDeleteMessages delete_messages = 7; */
        if (message.update.oneofKind === "deleteMessages")
            UpdateDeleteMessages.internalBinaryWrite(message.update.deleteMessages, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* UpdateComposeAction update_compose_action = 8; */
        if (message.update.oneofKind === "updateComposeAction")
            UpdateComposeAction.internalBinaryWrite(message.update.updateComposeAction, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* UpdateUserStatus update_user_status = 9; */
        if (message.update.oneofKind === "updateUserStatus")
            UpdateUserStatus.internalBinaryWrite(message.update.updateUserStatus, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* UpdateMessageAttachment message_attachment = 10; */
        if (message.update.oneofKind === "messageAttachment")
            UpdateMessageAttachment.internalBinaryWrite(message.update.messageAttachment, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* UpdateReaction update_reaction = 11; */
        if (message.update.oneofKind === "updateReaction")
            UpdateReaction.internalBinaryWrite(message.update.updateReaction, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* UpdateDeleteReaction delete_reaction = 12; */
        if (message.update.oneofKind === "deleteReaction")
            UpdateDeleteReaction.internalBinaryWrite(message.update.deleteReaction, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* UpdateChatParticipantAdd participant_add = 13; */
        if (message.update.oneofKind === "participantAdd")
            UpdateChatParticipantAdd.internalBinaryWrite(message.update.participantAdd, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* UpdateChatParticipantDelete participant_delete = 14; */
        if (message.update.oneofKind === "participantDelete")
            UpdateChatParticipantDelete.internalBinaryWrite(message.update.participantDelete, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* UpdateNewChat new_chat = 15; */
        if (message.update.oneofKind === "newChat")
            UpdateNewChat.internalBinaryWrite(message.update.newChat, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* UpdateDeleteChat delete_chat = 16; */
        if (message.update.oneofKind === "deleteChat")
            UpdateDeleteChat.internalBinaryWrite(message.update.deleteChat, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* UpdateSpaceMemberAdd space_member_add = 17; */
        if (message.update.oneofKind === "spaceMemberAdd")
            UpdateSpaceMemberAdd.internalBinaryWrite(message.update.spaceMemberAdd, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* UpdateSpaceMemberDelete space_member_delete = 18; */
        if (message.update.oneofKind === "spaceMemberDelete")
            UpdateSpaceMemberDelete.internalBinaryWrite(message.update.spaceMemberDelete, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* UpdateJoinSpace join_space = 19; */
        if (message.update.oneofKind === "joinSpace")
            UpdateJoinSpace.internalBinaryWrite(message.update.joinSpace, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* UpdateReadMaxId update_read_max_id = 20; */
        if (message.update.oneofKind === "updateReadMaxId")
            UpdateReadMaxId.internalBinaryWrite(message.update.updateReadMaxId, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Update
 */
export const Update = new Update$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateSpaceMemberAdd$Type extends MessageType<UpdateSpaceMemberAdd> {
    constructor() {
        super("UpdateSpaceMemberAdd", [
            { no: 1, name: "member", kind: "message", T: () => Member },
            { no: 2, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<UpdateSpaceMemberAdd>): UpdateSpaceMemberAdd {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateSpaceMemberAdd>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateSpaceMemberAdd): UpdateSpaceMemberAdd {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Member member */ 1:
                    message.member = Member.internalBinaryRead(reader, reader.uint32(), options, message.member);
                    break;
                case /* User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateSpaceMemberAdd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Member member = 1; */
        if (message.member)
            Member.internalBinaryWrite(message.member, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateSpaceMemberAdd
 */
export const UpdateSpaceMemberAdd = new UpdateSpaceMemberAdd$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateSpaceMemberDelete$Type extends MessageType<UpdateSpaceMemberDelete> {
    constructor() {
        super("UpdateSpaceMemberDelete", []);
    }
    create(value?: PartialMessage<UpdateSpaceMemberDelete>): UpdateSpaceMemberDelete {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateSpaceMemberDelete>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateSpaceMemberDelete): UpdateSpaceMemberDelete {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateSpaceMemberDelete, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateSpaceMemberDelete
 */
export const UpdateSpaceMemberDelete = new UpdateSpaceMemberDelete$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateJoinSpace$Type extends MessageType<UpdateJoinSpace> {
    constructor() {
        super("UpdateJoinSpace", [
            { no: 1, name: "space", kind: "message", T: () => Space },
            { no: 2, name: "member", kind: "message", T: () => Member }
        ]);
    }
    create(value?: PartialMessage<UpdateJoinSpace>): UpdateJoinSpace {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateJoinSpace>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateJoinSpace): UpdateJoinSpace {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Space space */ 1:
                    message.space = Space.internalBinaryRead(reader, reader.uint32(), options, message.space);
                    break;
                case /* Member member */ 2:
                    message.member = Member.internalBinaryRead(reader, reader.uint32(), options, message.member);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateJoinSpace, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Space space = 1; */
        if (message.space)
            Space.internalBinaryWrite(message.space, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Member member = 2; */
        if (message.member)
            Member.internalBinaryWrite(message.member, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateJoinSpace
 */
export const UpdateJoinSpace = new UpdateJoinSpace$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateReadMaxId$Type extends MessageType<UpdateReadMaxId> {
    constructor() {
        super("UpdateReadMaxId", [
            { no: 1, name: "peer_id", kind: "message", T: () => Peer },
            { no: 3, name: "read_max_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "unread_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateReadMaxId>): UpdateReadMaxId {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.readMaxId = 0n;
        message.unreadCount = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateReadMaxId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateReadMaxId): UpdateReadMaxId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Peer peer_id */ 1:
                    message.peerId = Peer.internalBinaryRead(reader, reader.uint32(), options, message.peerId);
                    break;
                case /* int64 read_max_id */ 3:
                    message.readMaxId = reader.int64().toBigInt();
                    break;
                case /* int32 unread_count */ 4:
                    message.unreadCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateReadMaxId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Peer peer_id = 1; */
        if (message.peerId)
            Peer.internalBinaryWrite(message.peerId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 read_max_id = 3; */
        if (message.readMaxId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.readMaxId);
        /* int32 unread_count = 4; */
        if (message.unreadCount !== 0)
            writer.tag(4, WireType.Varint).int32(message.unreadCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateReadMaxId
 */
export const UpdateReadMaxId = new UpdateReadMaxId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateNewChat$Type extends MessageType<UpdateNewChat> {
    constructor() {
        super("UpdateNewChat", [
            { no: 1, name: "chat", kind: "message", T: () => Chat },
            { no: 3, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<UpdateNewChat>): UpdateNewChat {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateNewChat>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateNewChat): UpdateNewChat {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Chat chat */ 1:
                    message.chat = Chat.internalBinaryRead(reader, reader.uint32(), options, message.chat);
                    break;
                case /* optional User user */ 3:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateNewChat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Chat chat = 1; */
        if (message.chat)
            Chat.internalBinaryWrite(message.chat, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional User user = 3; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateNewChat
 */
export const UpdateNewChat = new UpdateNewChat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDeleteChat$Type extends MessageType<UpdateDeleteChat> {
    constructor() {
        super("UpdateDeleteChat", [
            { no: 1, name: "peer_id", kind: "message", T: () => Peer }
        ]);
    }
    create(value?: PartialMessage<UpdateDeleteChat>): UpdateDeleteChat {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateDeleteChat>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDeleteChat): UpdateDeleteChat {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Peer peer_id */ 1:
                    message.peerId = Peer.internalBinaryRead(reader, reader.uint32(), options, message.peerId);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDeleteChat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Peer peer_id = 1; */
        if (message.peerId)
            Peer.internalBinaryWrite(message.peerId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateDeleteChat
 */
export const UpdateDeleteChat = new UpdateDeleteChat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateNewMessage$Type extends MessageType<UpdateNewMessage> {
    constructor() {
        super("UpdateNewMessage", [
            { no: 1, name: "message", kind: "message", T: () => Message }
        ]);
    }
    create(value?: PartialMessage<UpdateNewMessage>): UpdateNewMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateNewMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateNewMessage): UpdateNewMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Message message */ 1:
                    message.message = Message.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateNewMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Message message = 1; */
        if (message.message)
            Message.internalBinaryWrite(message.message, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateNewMessage
 */
export const UpdateNewMessage = new UpdateNewMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateEditMessage$Type extends MessageType<UpdateEditMessage> {
    constructor() {
        super("UpdateEditMessage", [
            { no: 1, name: "message", kind: "message", T: () => Message }
        ]);
    }
    create(value?: PartialMessage<UpdateEditMessage>): UpdateEditMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateEditMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateEditMessage): UpdateEditMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Message message */ 1:
                    message.message = Message.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateEditMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Message message = 1; */
        if (message.message)
            Message.internalBinaryWrite(message.message, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateEditMessage
 */
export const UpdateEditMessage = new UpdateEditMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDeleteMessages$Type extends MessageType<UpdateDeleteMessages> {
    constructor() {
        super("UpdateDeleteMessages", [
            { no: 1, name: "message_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "peer_id", kind: "message", T: () => Peer }
        ]);
    }
    create(value?: PartialMessage<UpdateDeleteMessages>): UpdateDeleteMessages {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messageIds = [];
        if (value !== undefined)
            reflectionMergePartial<UpdateDeleteMessages>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDeleteMessages): UpdateDeleteMessages {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 message_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.messageIds.push(reader.int64().toBigInt());
                    else
                        message.messageIds.push(reader.int64().toBigInt());
                    break;
                case /* Peer peer_id */ 2:
                    message.peerId = Peer.internalBinaryRead(reader, reader.uint32(), options, message.peerId);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDeleteMessages, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 message_ids = 1; */
        if (message.messageIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.messageIds.length; i++)
                writer.int64(message.messageIds[i]);
            writer.join();
        }
        /* Peer peer_id = 2; */
        if (message.peerId)
            Peer.internalBinaryWrite(message.peerId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateDeleteMessages
 */
export const UpdateDeleteMessages = new UpdateDeleteMessages$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateMessageId$Type extends MessageType<UpdateMessageId> {
    constructor() {
        super("UpdateMessageId", [
            { no: 1, name: "message_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "random_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateMessageId>): UpdateMessageId {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messageId = 0n;
        message.randomId = 0n;
        if (value !== undefined)
            reflectionMergePartial<UpdateMessageId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateMessageId): UpdateMessageId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 message_id */ 1:
                    message.messageId = reader.int64().toBigInt();
                    break;
                case /* int64 random_id */ 2:
                    message.randomId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateMessageId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 message_id = 1; */
        if (message.messageId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.messageId);
        /* int64 random_id = 2; */
        if (message.randomId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.randomId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateMessageId
 */
export const UpdateMessageId = new UpdateMessageId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateComposeAction$Type extends MessageType<UpdateComposeAction> {
    constructor() {
        super("UpdateComposeAction", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "peer_id", kind: "message", T: () => Peer },
            { no: 3, name: "action", kind: "enum", T: () => ["UpdateComposeAction.ComposeAction", UpdateComposeAction_ComposeAction] }
        ]);
    }
    create(value?: PartialMessage<UpdateComposeAction>): UpdateComposeAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0n;
        message.action = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateComposeAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateComposeAction): UpdateComposeAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* Peer peer_id */ 2:
                    message.peerId = Peer.internalBinaryRead(reader, reader.uint32(), options, message.peerId);
                    break;
                case /* UpdateComposeAction.ComposeAction action */ 3:
                    message.action = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateComposeAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* Peer peer_id = 2; */
        if (message.peerId)
            Peer.internalBinaryWrite(message.peerId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* UpdateComposeAction.ComposeAction action = 3; */
        if (message.action !== 0)
            writer.tag(3, WireType.Varint).int32(message.action);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateComposeAction
 */
export const UpdateComposeAction = new UpdateComposeAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateMessageAttachment$Type extends MessageType<UpdateMessageAttachment> {
    constructor() {
        super("UpdateMessageAttachment", [
            { no: 1, name: "attachment", kind: "message", T: () => MessageAttachment },
            { no: 2, name: "message_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "peer_id", kind: "message", T: () => Peer },
            { no: 50, name: "chat_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateMessageAttachment>): UpdateMessageAttachment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messageId = 0n;
        message.chatId = 0n;
        if (value !== undefined)
            reflectionMergePartial<UpdateMessageAttachment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateMessageAttachment): UpdateMessageAttachment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MessageAttachment attachment */ 1:
                    message.attachment = MessageAttachment.internalBinaryRead(reader, reader.uint32(), options, message.attachment);
                    break;
                case /* int64 message_id */ 2:
                    message.messageId = reader.int64().toBigInt();
                    break;
                case /* Peer peer_id */ 3:
                    message.peerId = Peer.internalBinaryRead(reader, reader.uint32(), options, message.peerId);
                    break;
                case /* int64 chat_id */ 50:
                    message.chatId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateMessageAttachment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MessageAttachment attachment = 1; */
        if (message.attachment)
            MessageAttachment.internalBinaryWrite(message.attachment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 message_id = 2; */
        if (message.messageId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.messageId);
        /* Peer peer_id = 3; */
        if (message.peerId)
            Peer.internalBinaryWrite(message.peerId, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 chat_id = 50; */
        if (message.chatId !== 0n)
            writer.tag(50, WireType.Varint).int64(message.chatId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateMessageAttachment
 */
export const UpdateMessageAttachment = new UpdateMessageAttachment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateReaction$Type extends MessageType<UpdateReaction> {
    constructor() {
        super("UpdateReaction", [
            { no: 1, name: "reaction", kind: "message", T: () => Reaction }
        ]);
    }
    create(value?: PartialMessage<UpdateReaction>): UpdateReaction {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateReaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateReaction): UpdateReaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Reaction reaction */ 1:
                    message.reaction = Reaction.internalBinaryRead(reader, reader.uint32(), options, message.reaction);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateReaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Reaction reaction = 1; */
        if (message.reaction)
            Reaction.internalBinaryWrite(message.reaction, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateReaction
 */
export const UpdateReaction = new UpdateReaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDeleteReaction$Type extends MessageType<UpdateDeleteReaction> {
    constructor() {
        super("UpdateDeleteReaction", [
            { no: 1, name: "emoji", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "chat_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "message_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateDeleteReaction>): UpdateDeleteReaction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.emoji = "";
        message.chatId = 0n;
        message.messageId = 0n;
        message.userId = 0n;
        if (value !== undefined)
            reflectionMergePartial<UpdateDeleteReaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDeleteReaction): UpdateDeleteReaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string emoji */ 1:
                    message.emoji = reader.string();
                    break;
                case /* int64 chat_id */ 2:
                    message.chatId = reader.int64().toBigInt();
                    break;
                case /* int64 message_id */ 3:
                    message.messageId = reader.int64().toBigInt();
                    break;
                case /* int64 user_id */ 4:
                    message.userId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDeleteReaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string emoji = 1; */
        if (message.emoji !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.emoji);
        /* int64 chat_id = 2; */
        if (message.chatId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.chatId);
        /* int64 message_id = 3; */
        if (message.messageId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.messageId);
        /* int64 user_id = 4; */
        if (message.userId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateDeleteReaction
 */
export const UpdateDeleteReaction = new UpdateDeleteReaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserStatus$Type extends MessageType<UpdateUserStatus> {
    constructor() {
        super("UpdateUserStatus", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "status", kind: "message", T: () => UserStatus }
        ]);
    }
    create(value?: PartialMessage<UpdateUserStatus>): UpdateUserStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0n;
        if (value !== undefined)
            reflectionMergePartial<UpdateUserStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserStatus): UpdateUserStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* UserStatus status */ 2:
                    message.status = UserStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* UserStatus status = 2; */
        if (message.status)
            UserStatus.internalBinaryWrite(message.status, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateUserStatus
 */
export const UpdateUserStatus = new UpdateUserStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatParticipant$Type extends MessageType<ChatParticipant> {
    constructor() {
        super("ChatParticipant", [
            { no: 1, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "date", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ChatParticipant>): ChatParticipant {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0n;
        message.date = 0n;
        if (value !== undefined)
            reflectionMergePartial<ChatParticipant>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatParticipant): ChatParticipant {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 user_id */ 1:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* int64 date */ 2:
                    message.date = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatParticipant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.userId);
        /* int64 date = 2; */
        if (message.date !== 0n)
            writer.tag(2, WireType.Varint).int64(message.date);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChatParticipant
 */
export const ChatParticipant = new ChatParticipant$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateChatParticipantAdd$Type extends MessageType<UpdateChatParticipantAdd> {
    constructor() {
        super("UpdateChatParticipantAdd", [
            { no: 1, name: "chat_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "participant", kind: "message", T: () => ChatParticipant }
        ]);
    }
    create(value?: PartialMessage<UpdateChatParticipantAdd>): UpdateChatParticipantAdd {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = 0n;
        if (value !== undefined)
            reflectionMergePartial<UpdateChatParticipantAdd>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateChatParticipantAdd): UpdateChatParticipantAdd {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 chat_id */ 1:
                    message.chatId = reader.int64().toBigInt();
                    break;
                case /* ChatParticipant participant */ 2:
                    message.participant = ChatParticipant.internalBinaryRead(reader, reader.uint32(), options, message.participant);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateChatParticipantAdd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 chat_id = 1; */
        if (message.chatId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.chatId);
        /* ChatParticipant participant = 2; */
        if (message.participant)
            ChatParticipant.internalBinaryWrite(message.participant, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateChatParticipantAdd
 */
export const UpdateChatParticipantAdd = new UpdateChatParticipantAdd$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateChatParticipantDelete$Type extends MessageType<UpdateChatParticipantDelete> {
    constructor() {
        super("UpdateChatParticipantDelete", [
            { no: 1, name: "chat_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateChatParticipantDelete>): UpdateChatParticipantDelete {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = 0n;
        message.userId = 0n;
        if (value !== undefined)
            reflectionMergePartial<UpdateChatParticipantDelete>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateChatParticipantDelete): UpdateChatParticipantDelete {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 chat_id */ 1:
                    message.chatId = reader.int64().toBigInt();
                    break;
                case /* int64 user_id */ 2:
                    message.userId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateChatParticipantDelete, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 chat_id = 1; */
        if (message.chatId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.chatId);
        /* int64 user_id = 2; */
        if (message.userId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateChatParticipantDelete
 */
export const UpdateChatParticipantDelete = new UpdateChatParticipantDelete$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserStatus$Type extends MessageType<UserStatus> {
    constructor() {
        super("UserStatus", [
            { no: 1, name: "online", kind: "enum", T: () => ["UserStatus.Status", UserStatus_Status] },
            { no: 2, name: "last_online", kind: "message", T: () => LastOnline }
        ]);
    }
    create(value?: PartialMessage<UserStatus>): UserStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.online = 0;
        if (value !== undefined)
            reflectionMergePartial<UserStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserStatus): UserStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* UserStatus.Status online */ 1:
                    message.online = reader.int32();
                    break;
                case /* LastOnline last_online */ 2:
                    message.lastOnline = LastOnline.internalBinaryRead(reader, reader.uint32(), options, message.lastOnline);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* UserStatus.Status online = 1; */
        if (message.online !== 0)
            writer.tag(1, WireType.Varint).int32(message.online);
        /* LastOnline last_online = 2; */
        if (message.lastOnline)
            LastOnline.internalBinaryWrite(message.lastOnline, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UserStatus
 */
export const UserStatus = new UserStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LastOnline$Type extends MessageType<LastOnline> {
    constructor() {
        super("LastOnline", [
            { no: 1, name: "date", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<LastOnline>): LastOnline {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LastOnline>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LastOnline): LastOnline {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int64 date */ 1:
                    message.date = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LastOnline, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int64 date = 1; */
        if (message.date !== undefined)
            writer.tag(1, WireType.Varint).int64(message.date);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LastOnline
 */
export const LastOnline = new LastOnline$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteChatInput$Type extends MessageType<DeleteChatInput> {
    constructor() {
        super("DeleteChatInput", [
            { no: 1, name: "peer_id", kind: "message", T: () => InputPeer }
        ]);
    }
    create(value?: PartialMessage<DeleteChatInput>): DeleteChatInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteChatInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteChatInput): DeleteChatInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* InputPeer peer_id */ 1:
                    message.peerId = InputPeer.internalBinaryRead(reader, reader.uint32(), options, message.peerId);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteChatInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* InputPeer peer_id = 1; */
        if (message.peerId)
            InputPeer.internalBinaryWrite(message.peerId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteChatInput
 */
export const DeleteChatInput = new DeleteChatInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteChatResult$Type extends MessageType<DeleteChatResult> {
    constructor() {
        super("DeleteChatResult", []);
    }
    create(value?: PartialMessage<DeleteChatResult>): DeleteChatResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteChatResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteChatResult): DeleteChatResult {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteChatResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteChatResult
 */
export const DeleteChatResult = new DeleteChatResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteToSpaceInput$Type extends MessageType<InviteToSpaceInput> {
    constructor() {
        super("InviteToSpaceInput", [
            { no: 1, name: "space_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "role", kind: "enum", T: () => ["Member.Role", Member_Role] },
            { no: 3, name: "user_id", kind: "scalar", oneof: "via", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "email", kind: "scalar", oneof: "via", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "phone_number", kind: "scalar", oneof: "via", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InviteToSpaceInput>): InviteToSpaceInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.spaceId = 0n;
        message.role = 0;
        message.via = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<InviteToSpaceInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteToSpaceInput): InviteToSpaceInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 space_id */ 1:
                    message.spaceId = reader.int64().toBigInt();
                    break;
                case /* Member.Role role */ 2:
                    message.role = reader.int32();
                    break;
                case /* int64 user_id */ 3:
                    message.via = {
                        oneofKind: "userId",
                        userId: reader.int64().toBigInt()
                    };
                    break;
                case /* string email */ 4:
                    message.via = {
                        oneofKind: "email",
                        email: reader.string()
                    };
                    break;
                case /* string phone_number */ 5:
                    message.via = {
                        oneofKind: "phoneNumber",
                        phoneNumber: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteToSpaceInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 space_id = 1; */
        if (message.spaceId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.spaceId);
        /* Member.Role role = 2; */
        if (message.role !== 0)
            writer.tag(2, WireType.Varint).int32(message.role);
        /* int64 user_id = 3; */
        if (message.via.oneofKind === "userId")
            writer.tag(3, WireType.Varint).int64(message.via.userId);
        /* string email = 4; */
        if (message.via.oneofKind === "email")
            writer.tag(4, WireType.LengthDelimited).string(message.via.email);
        /* string phone_number = 5; */
        if (message.via.oneofKind === "phoneNumber")
            writer.tag(5, WireType.LengthDelimited).string(message.via.phoneNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InviteToSpaceInput
 */
export const InviteToSpaceInput = new InviteToSpaceInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteToSpaceResult$Type extends MessageType<InviteToSpaceResult> {
    constructor() {
        super("InviteToSpaceResult", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "member", kind: "message", T: () => Member },
            { no: 3, name: "chat", kind: "message", T: () => Chat },
            { no: 4, name: "dialog", kind: "message", T: () => Dialog }
        ]);
    }
    create(value?: PartialMessage<InviteToSpaceResult>): InviteToSpaceResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<InviteToSpaceResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteToSpaceResult): InviteToSpaceResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* Member member */ 2:
                    message.member = Member.internalBinaryRead(reader, reader.uint32(), options, message.member);
                    break;
                case /* Chat chat */ 3:
                    message.chat = Chat.internalBinaryRead(reader, reader.uint32(), options, message.chat);
                    break;
                case /* Dialog dialog */ 4:
                    message.dialog = Dialog.internalBinaryRead(reader, reader.uint32(), options, message.dialog);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteToSpaceResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Member member = 2; */
        if (message.member)
            Member.internalBinaryWrite(message.member, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Chat chat = 3; */
        if (message.chat)
            Chat.internalBinaryWrite(message.chat, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Dialog dialog = 4; */
        if (message.dialog)
            Dialog.internalBinaryWrite(message.dialog, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InviteToSpaceResult
 */
export const InviteToSpaceResult = new InviteToSpaceResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatParticipantsInput$Type extends MessageType<GetChatParticipantsInput> {
    constructor() {
        super("GetChatParticipantsInput", [
            { no: 1, name: "chat_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetChatParticipantsInput>): GetChatParticipantsInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetChatParticipantsInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatParticipantsInput): GetChatParticipantsInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 chat_id */ 1:
                    message.chatId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatParticipantsInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 chat_id = 1; */
        if (message.chatId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.chatId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetChatParticipantsInput
 */
export const GetChatParticipantsInput = new GetChatParticipantsInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatParticipantsResult$Type extends MessageType<GetChatParticipantsResult> {
    constructor() {
        super("GetChatParticipantsResult", [
            { no: 1, name: "participants", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatParticipant }
        ]);
    }
    create(value?: PartialMessage<GetChatParticipantsResult>): GetChatParticipantsResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.participants = [];
        if (value !== undefined)
            reflectionMergePartial<GetChatParticipantsResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatParticipantsResult): GetChatParticipantsResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ChatParticipant participants */ 1:
                    message.participants.push(ChatParticipant.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatParticipantsResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ChatParticipant participants = 1; */
        for (let i = 0; i < message.participants.length; i++)
            ChatParticipant.internalBinaryWrite(message.participants[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetChatParticipantsResult
 */
export const GetChatParticipantsResult = new GetChatParticipantsResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddChatParticipantInput$Type extends MessageType<AddChatParticipantInput> {
    constructor() {
        super("AddChatParticipantInput", [
            { no: 1, name: "chat_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AddChatParticipantInput>): AddChatParticipantInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = 0n;
        message.userId = 0n;
        if (value !== undefined)
            reflectionMergePartial<AddChatParticipantInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddChatParticipantInput): AddChatParticipantInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 chat_id */ 1:
                    message.chatId = reader.int64().toBigInt();
                    break;
                case /* int64 user_id */ 2:
                    message.userId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddChatParticipantInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 chat_id = 1; */
        if (message.chatId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.chatId);
        /* int64 user_id = 2; */
        if (message.userId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AddChatParticipantInput
 */
export const AddChatParticipantInput = new AddChatParticipantInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddChatParticipantResult$Type extends MessageType<AddChatParticipantResult> {
    constructor() {
        super("AddChatParticipantResult", [
            { no: 1, name: "participant", kind: "message", T: () => ChatParticipant }
        ]);
    }
    create(value?: PartialMessage<AddChatParticipantResult>): AddChatParticipantResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AddChatParticipantResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddChatParticipantResult): AddChatParticipantResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ChatParticipant participant */ 1:
                    message.participant = ChatParticipant.internalBinaryRead(reader, reader.uint32(), options, message.participant);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddChatParticipantResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ChatParticipant participant = 1; */
        if (message.participant)
            ChatParticipant.internalBinaryWrite(message.participant, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AddChatParticipantResult
 */
export const AddChatParticipantResult = new AddChatParticipantResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveChatParticipantInput$Type extends MessageType<RemoveChatParticipantInput> {
    constructor() {
        super("RemoveChatParticipantInput", [
            { no: 1, name: "chat_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveChatParticipantInput>): RemoveChatParticipantInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = 0n;
        message.userId = 0n;
        if (value !== undefined)
            reflectionMergePartial<RemoveChatParticipantInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveChatParticipantInput): RemoveChatParticipantInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 chat_id */ 1:
                    message.chatId = reader.int64().toBigInt();
                    break;
                case /* int64 user_id */ 2:
                    message.userId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveChatParticipantInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 chat_id = 1; */
        if (message.chatId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.chatId);
        /* int64 user_id = 2; */
        if (message.userId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RemoveChatParticipantInput
 */
export const RemoveChatParticipantInput = new RemoveChatParticipantInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveChatParticipantResult$Type extends MessageType<RemoveChatParticipantResult> {
    constructor() {
        super("RemoveChatParticipantResult", []);
    }
    create(value?: PartialMessage<RemoveChatParticipantResult>): RemoveChatParticipantResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RemoveChatParticipantResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveChatParticipantResult): RemoveChatParticipantResult {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RemoveChatParticipantResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RemoveChatParticipantResult
 */
export const RemoveChatParticipantResult = new RemoveChatParticipantResult$Type();
