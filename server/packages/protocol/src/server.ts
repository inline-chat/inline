// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "server.proto" (package "server", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message server.ServerUpdate
 */
export interface ServerUpdate {
    /**
     * @generated from protobuf oneof: update
     */
    update: {
        oneofKind: "newMessage";
        /**
         * @generated from protobuf field: server.ServerUpdateNewMessage new_message = 4;
         */
        newMessage: ServerUpdateNewMessage;
    } | {
        oneofKind: "editMessage";
        /**
         * @generated from protobuf field: server.ServerUpdateEditMessage edit_message = 5;
         */
        editMessage: ServerUpdateEditMessage;
    } | {
        oneofKind: "deleteMessages";
        /**
         * @generated from protobuf field: server.ServerUpdateDeleteMessages delete_messages = 6;
         */
        deleteMessages: ServerUpdateDeleteMessages;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message server.ServerUpdateNewMessage
 */
export interface ServerUpdateNewMessage {
    /**
     * @generated from protobuf field: int64 chat_id = 1;
     */
    chatId: bigint;
    /**
     * @generated from protobuf field: int64 msg_id = 2;
     */
    msgId: bigint;
    /**
     * @generated from protobuf field: int32 pts = 3;
     */
    pts: number;
}
/**
 * @generated from protobuf message server.ServerUpdateEditMessage
 */
export interface ServerUpdateEditMessage {
    /**
     * @generated from protobuf field: int64 chat_id = 1;
     */
    chatId: bigint;
    /**
     * @generated from protobuf field: int64 msg_id = 2;
     */
    msgId: bigint;
    /**
     * @generated from protobuf field: int32 pts = 3;
     */
    pts: number;
}
/**
 * @generated from protobuf message server.ServerUpdateDeleteMessages
 */
export interface ServerUpdateDeleteMessages {
    /**
     * @generated from protobuf field: int64 chat_id = 1;
     */
    chatId: bigint;
    /**
     * @generated from protobuf field: repeated int64 msg_ids = 2;
     */
    msgIds: bigint[];
    /**
     * @generated from protobuf field: int32 pts = 3;
     */
    pts: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class ServerUpdate$Type extends MessageType<ServerUpdate> {
    constructor() {
        super("server.ServerUpdate", [
            { no: 4, name: "new_message", kind: "message", oneof: "update", T: () => ServerUpdateNewMessage },
            { no: 5, name: "edit_message", kind: "message", oneof: "update", T: () => ServerUpdateEditMessage },
            { no: 6, name: "delete_messages", kind: "message", oneof: "update", T: () => ServerUpdateDeleteMessages }
        ]);
    }
    create(value?: PartialMessage<ServerUpdate>): ServerUpdate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.update = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ServerUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerUpdate): ServerUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* server.ServerUpdateNewMessage new_message */ 4:
                    message.update = {
                        oneofKind: "newMessage",
                        newMessage: ServerUpdateNewMessage.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).newMessage)
                    };
                    break;
                case /* server.ServerUpdateEditMessage edit_message */ 5:
                    message.update = {
                        oneofKind: "editMessage",
                        editMessage: ServerUpdateEditMessage.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).editMessage)
                    };
                    break;
                case /* server.ServerUpdateDeleteMessages delete_messages */ 6:
                    message.update = {
                        oneofKind: "deleteMessages",
                        deleteMessages: ServerUpdateDeleteMessages.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).deleteMessages)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* server.ServerUpdateNewMessage new_message = 4; */
        if (message.update.oneofKind === "newMessage")
            ServerUpdateNewMessage.internalBinaryWrite(message.update.newMessage, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* server.ServerUpdateEditMessage edit_message = 5; */
        if (message.update.oneofKind === "editMessage")
            ServerUpdateEditMessage.internalBinaryWrite(message.update.editMessage, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* server.ServerUpdateDeleteMessages delete_messages = 6; */
        if (message.update.oneofKind === "deleteMessages")
            ServerUpdateDeleteMessages.internalBinaryWrite(message.update.deleteMessages, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message server.ServerUpdate
 */
export const ServerUpdate = new ServerUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerUpdateNewMessage$Type extends MessageType<ServerUpdateNewMessage> {
    constructor() {
        super("server.ServerUpdateNewMessage", [
            { no: 1, name: "chat_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "msg_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "pts", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ServerUpdateNewMessage>): ServerUpdateNewMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = 0n;
        message.msgId = 0n;
        message.pts = 0;
        if (value !== undefined)
            reflectionMergePartial<ServerUpdateNewMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerUpdateNewMessage): ServerUpdateNewMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 chat_id */ 1:
                    message.chatId = reader.int64().toBigInt();
                    break;
                case /* int64 msg_id */ 2:
                    message.msgId = reader.int64().toBigInt();
                    break;
                case /* int32 pts */ 3:
                    message.pts = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerUpdateNewMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 chat_id = 1; */
        if (message.chatId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.chatId);
        /* int64 msg_id = 2; */
        if (message.msgId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.msgId);
        /* int32 pts = 3; */
        if (message.pts !== 0)
            writer.tag(3, WireType.Varint).int32(message.pts);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message server.ServerUpdateNewMessage
 */
export const ServerUpdateNewMessage = new ServerUpdateNewMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerUpdateEditMessage$Type extends MessageType<ServerUpdateEditMessage> {
    constructor() {
        super("server.ServerUpdateEditMessage", [
            { no: 1, name: "chat_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "msg_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "pts", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ServerUpdateEditMessage>): ServerUpdateEditMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = 0n;
        message.msgId = 0n;
        message.pts = 0;
        if (value !== undefined)
            reflectionMergePartial<ServerUpdateEditMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerUpdateEditMessage): ServerUpdateEditMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 chat_id */ 1:
                    message.chatId = reader.int64().toBigInt();
                    break;
                case /* int64 msg_id */ 2:
                    message.msgId = reader.int64().toBigInt();
                    break;
                case /* int32 pts */ 3:
                    message.pts = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerUpdateEditMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 chat_id = 1; */
        if (message.chatId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.chatId);
        /* int64 msg_id = 2; */
        if (message.msgId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.msgId);
        /* int32 pts = 3; */
        if (message.pts !== 0)
            writer.tag(3, WireType.Varint).int32(message.pts);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message server.ServerUpdateEditMessage
 */
export const ServerUpdateEditMessage = new ServerUpdateEditMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerUpdateDeleteMessages$Type extends MessageType<ServerUpdateDeleteMessages> {
    constructor() {
        super("server.ServerUpdateDeleteMessages", [
            { no: 1, name: "chat_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "msg_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "pts", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ServerUpdateDeleteMessages>): ServerUpdateDeleteMessages {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = 0n;
        message.msgIds = [];
        message.pts = 0;
        if (value !== undefined)
            reflectionMergePartial<ServerUpdateDeleteMessages>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerUpdateDeleteMessages): ServerUpdateDeleteMessages {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 chat_id */ 1:
                    message.chatId = reader.int64().toBigInt();
                    break;
                case /* repeated int64 msg_ids */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.msgIds.push(reader.int64().toBigInt());
                    else
                        message.msgIds.push(reader.int64().toBigInt());
                    break;
                case /* int32 pts */ 3:
                    message.pts = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerUpdateDeleteMessages, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 chat_id = 1; */
        if (message.chatId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.chatId);
        /* repeated int64 msg_ids = 2; */
        if (message.msgIds.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.msgIds.length; i++)
                writer.int64(message.msgIds[i]);
            writer.join();
        }
        /* int32 pts = 3; */
        if (message.pts !== 0)
            writer.tag(3, WireType.Varint).int32(message.pts);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message server.ServerUpdateDeleteMessages
 */
export const ServerUpdateDeleteMessages = new ServerUpdateDeleteMessages$Type();
